{
    "sidebar": {
        "title": "ការសិក្សាចុងសប្ដាហ៍",
        "version": "ជំនាន់ទី ១.០.០",
        "search_placeholder": "ស្វែងរក",
        "python": "Python",
        "python.overview": "និយមន័យទូទៅ",
        "python.variable": "អថេរ",
        "python.data-type": "ប្រភេទទិន្នន័យ",
        "python.operator": "សញ្ញា",
        "python.input-output": "បញ្ចូល & លទ្ធផល",
        "python.control-flow": "ការគ្រប់គ្រង",
        "python.loop": "រង្វិលជុំ",
        "python.function": "ទម្រង់មុខងារ",
        "python.exercise": "សំណួរ"
    },
    "contents": {
        "python.overview": {
            "title": [
                "១. តើអ្វីទៅជា Python?",
                "២. កន្ទុយឯកសារ Python",
                "៣. របៀបដំឡើង Python",
                "៤. របៀបពិនិត្យថាតើ Python បានដំឡើងរួចឬនៅ",
                "៥. កម្មវិធី Python ដំបូង",
                "៦. Python Comments"
            ],
            "description": [
                "Python គឺជាភាសាកុំព្យូទ័រកម្រិតខ្ពស់ ដែលត្រូវបានបង្កើតឡើងដោយ Guido van Rossum នៅឆ្នាំ 1991។ វាសាមញ្ញ ងាយស្រួលអាន ហើយអាចប្រើបានក្នុងវិស័យជាច្រើនដូចជា កម្មវិធីគេហទំព័រ វិទ្យាសាស្ត្រទិន្នន័យ បញ្ញាសិប្បនិម្មិត ការស្វ័យប្រវត្តិកម្ម និងហ្គេម។",
                "ឯកសារ Python ប្រើកន្ទុយ `.py`។ ឧទាហរណ៍៖ `hello.py`។",
                [
                    "ចូលទៅកាន់",
                    "ទាញយក និងដំឡើងជំនាន់ចុងក្រោយ។",
                    "លើ Windows ត្រូវ ចុចធីក `Add Python to PATH` មុនពេលដំឡើង។"
                ],
                "បើក Command Prompt (Windows) ឬ Terminal (Mac/Linux) ហើយវាយពាក្យ៖",
                "បង្កើតឯកសារឈ្មោះ `hello.py`។ ឧទាហរណ៍៖",
                [
                    "Comments ក្នុង Python គឺជាបន្ទាត់កូដ ដែលត្រូវបាន មិនអើពើដោយ Interpreter របស់ Python។ វាត្រូវបានប្រើសម្រាប់ពន្យល់អំពីកូដ ធ្វើឱ្យកូដងាយអាន ឬប្រើដើម្បីបិទបន្ទាត់កូដមួយចំនួនបណ្តោះអាសន្នក្នុងពេល Debugging។",
                    "**Single-line comment** → ចាប់ផ្តើមដោយ `#`",
                    "**Multi-line comment** → ប្រើ `#` ជាបន្ទាត់ច្រើន ឬប្រើ `\"\"\" ... \"\"\"` ដើម្បីបិតកូដច្រើនបន្ទាត់។"
                ]
            ]
        },
        "python.variable": {
            "title": [
                "១. អ្វីទៅជាអថេរ?",
                "២. ការបង្កើតអថេរ",
                "៣. ច្បាប់នៃការដាក់ឈ្មោះអថេរ",
                "៤. ការកំណត់តម្លៃច្រើនទៅអថេរ",
                "៥. អថេរសកល និងអថេរតំបន់"
            ],
            "description": [
                "អថេរគឺជាប្រអប់សម្រាប់ផ្ទុកតម្លៃទិន្នន័យ (data values)។ នៅក្នុងភាសា Python អ្នកមិនចាំបាច់ប្រកាសប្រភេទទិន្នន័យ (data type) មុនពេលប្រើប្រាស់វាទេ ព្រោះ Python គឺជាភាសាដែលកំណត់ប្រភេទទិន្នន័យដោយស្វ័យប្រវត្តិ (dynamically typed language)។ អ្នកបកប្រែ (interpreter) នឹងកំណត់ប្រភេទទិន្នន័យរបស់អថេរដោយស្វ័យប្រវត្តិ ផ្អែកលើតម្លៃដែលអ្នកបានកំណត់ឱ្យវា។",
                "ដើម្បីបង្កើតអថេរ (variable) អ្នកគ្រាន់តែធ្វើការកំណត់តម្លៃ (assign) ទៅឱ្យឈ្មោះណាមួយដោយប្រើសញ្ញាស្មើ (`=`)។ អ្នកក៏អាចប្តូរតម្លៃរបស់អថេរនៅពេលក្រោយបានដែរ ទោះបីជាតម្លៃថ្មីមានប្រភេទទិន្នន័យខុសគ្នាក៏ដោយ។",
                [
                    "ឈ្មោះអថេរអាចខ្លីដូចជា `x` ឬ `y` ឬពិពណ៌នាបានច្រើនដូចជា `total_volume` ឬ `car_name`។ ច្បាប់សម្រាប់អថេររបស់ Python គឺ៖",
                    [
                        "ឈ្មោះអថេរត្រូវតែចាប់ផ្តើមដោយអក្សរ ឬសញ្ញា `_` (underscore)។",
                        "ឈ្មោះអថេរមិនអាចចាប់ផ្តើមដោយលេខទេ។",
                        "ឈ្មោះអថេរអាចមានតែតួអក្សរអក្សរ-លេខ (A-z, 0-9) និងសញ្ញា `_` (underscore) ប៉ុណ្ណោះ។",
                        "ឈ្មោះអថេរប្រកាន់អក្សរតូចធំ (**case-sensitive**) (`age`, `Age`, និង `AGE` គឺជាអថេរបីផ្សេងគ្នា)។"
                    ]
                ],
                "Python អនុញ្ញាតឱ្យអ្នកកំណត់តម្លៃទៅអថេរច្រើនក្នុងបន្ទាត់តែមួយ។ នេះត្រូវបានប្រើជាញឹកញាប់សម្រាប់ការបំបែកទិន្នន័យ (unpacking) ឬសម្រាប់ការកំណត់តម្លៃអថេរដោយសង្ខេប។",
                [
                    "អថេរតំបន់ (**local variable**) គឺជាអថេរដែលត្រូវបានកំណត់នៅក្នុង function មួយ ហើយអាចប្រើបានតែនៅក្នុង function នោះប៉ុណ្ណោះ។ អថេរសកល (**global variable**) ត្រូវបានកំណត់នៅខាងក្រៅ function ណាមួយ ហើយអាចត្រូវបានប្រើដោយអ្នកណាម្នាក់ ទាំងខាងក្នុង និងខាងក្រៅ function។",
                    "**ឧទាហរណ៍នៃអថេរតំបន់**៖",
                    "**ឧទាហរណ៍នៃអថេរសកល**៖"
                ]
            ]
        },
        "python.data-type": {
            "title": [
                "១. ប្រភេទទិន្នន័យ Python",
                "២. ប្រភេទទិន្នន័យលេខ Python",
                [
                    "៣. ប្រភេទទិន្នន័យបញ្ជី (list) Python",
                    "ការបង្កើតបញ្ជី (list)",
                    "ការចូលប្រើធាតុក្នុងបញ្ជី",
                    "ការផ្លាស់ប្តូរធាតុក្នុងបញ្ជី (mutability)",
                    "ការបន្ថែមធាតុក្នុងបញ្ជី (append)",
                    "ការលុបធាតុក្នុងបញ្ជី (remove)",
                    "ការរង្វិលជុំបញ្ជី (loop)"
                ],
                "៤. ប្រភេទទិន្នន័យ Tuple (tuple) Python",
                "៥. ប្រភេទទិន្នន័យ String (str) Python",
                "៦. ប្រភេទទិន្នន័យ Set (set) Python",
                "៧. ប្រភេទទិន្នន័យ Dictionary (dict) Python"
            ],
            "description": [
                [
                    "Python Data Types ត្រូវបានប្រើដើម្បីចាត់ថ្នាក់ទិន្នន័យផ្សេងៗគ្នា ដូចជា លេខ អក្សរ ឬតម្លៃពិត/មិនពិត។ ការចាត់ថ្នាក់នេះមានសារៈសំខាន់សម្រាប់អ្នកអភិវឌ្ឍន៍ដើម្បីគ្រប់គ្រងទិន្នន័យប្រកបដោយប្រសិទ្ធភាព ព្រោះវាជាអ្នកកំណត់ប្រតិបត្តិការដែលអាចត្រូវបានអនុវត្តលើទិន្នន័យជាក់លាក់ណាមួយ។ នៅក្នុងការសរសេរកម្មវិធីកុំព្យូទ័រ ប្រភេទទិន្នន័យបញ្ជាក់ពីប្រភេទទិន្នន័យដែលអាចត្រូវបានរក្សាទុកក្នុងអថេរ។ ឧទាហរណ៍៖",
                    "នៅទីនេះ **24** (លេខចំនួនគត់) ត្រូវបានកំណត់ទៅអថេរ `num`។ ដូច្នេះ ប្រភេទទិន្នន័យរបស់ `num` គឺជា class `int`។",
                    [
                        {
                            "type": "លេខ (Numeric)",
                            "class": "`int`, `float`, `complex`",
                            "description": "ផ្ទុកតម្លៃលេខ"
                        },
                        {
                            "type": "អក្សរ (String)",
                            "class": "`str`",
                            "description": "ផ្ទុកលំដាប់នៃតួអក្សរ"
                        },
                        {
                            "type": "លំដាប់ (Sequence)",
                            "class": "`list`, `tuple`, `range`",
                            "description": "ផ្ទុកការប្រមូលទិន្នន័យ"
                        },
                        {
                            "type": "ផែនទី (Mapping)",
                            "class": "`dict`",
                            "description": "ផ្ទុកទិន្នន័យក្នុងទម្រង់គូ key-value"
                        },
                        {
                            "type": "Boolean",
                            "class": "`bool`",
                            "description": "ផ្ទុក `True` ឬ `False`"
                        },
                        {
                            "type": "សំណុំ (Set)",
                            "class": "`set`, `frozenset`",
                            "description": "ផ្ទុកការប្រមូលទិន្នន័យដែលគ្មានភាពជាន់គ្នា (unique)"
                        }
                    ],
                    "ដោយសារតែអ្វីៗទាំងអស់គឺជា object នៅក្នុងការសរសេរកម្មវិធី Python ប្រភេទទិន្នន័យគឺជា classes ហើយអថេរគឺជា instances (object) នៃ classes ទាំងនេះ។"
                ],
                [
                    "នៅក្នុង Python ប្រភេទទិន្នន័យលេខត្រូវបានប្រើដើម្បីផ្ទុកតម្លៃលេខ។ ចំនួនគត់ (Integers), លេខទសភាគ (floating-point numbers) និងលេខកុំផ្លិច (complex numbers) ស្ថិតនៅក្រោមប្រភេទលេខរបស់ Python។ ពួកវាត្រូវបានកំណត់ជា classes `int`, `float` និង `complex` នៅក្នុង Python។",
                    [
                        "`int` - ផ្ទុកចំនួនគត់ដែលមានសញ្ញា (signed) និងមានប្រវែងគ្មានដែនកំណត់។",
                        "`float` - ផ្ទុកលេខទសភាគ (floating decimal points) និងមានភាពត្រឹមត្រូវរហូតដល់ 15 ខ្ទង់ទសភាគ។",
                        "`complex` - ផ្ទុកលេខកុំផ្លិច (complex numbers)។"
                    ],
                    "យើងអាចប្រើមុខងារ `type()` ដើម្បីដឹងថាអថេរ ឬតម្លៃមួយជាកម្មសិទ្ធិរបស់ class ណា។ តោះមើលឧទាហរណ៍៖",
                    "នៅក្នុងឧទាហរណ៍ខាងលើ យើងបានបង្កើតអថេរចំនួនបីដែលមានឈ្មោះ `num1`, `num2` និង `num3` ដែលមានតម្លៃ **5**, **5.0**, និង `1+2j` រៀងគ្នា។",
                    "យើងក៏បានប្រើមុខងារ `type()` ដើម្បីដឹងថាអថេរជាក់លាក់មួយជារបស់ class ណា។ ព្រោះថា៖",
                    [
                        "**5** គឺជាតម្លៃចំនួនគត់ `type()` ត្រលប់ `int` ជា class របស់ `num1` គឺ `<class 'int'>`",
                        "**2.0** គឺជាតម្លៃទសភាគ `type()` ត្រលប់ `float` ជា class របស់ `num2` គឺ `<class 'float'>`",
                        "`1 + 2j` គឺជាលេខកុំផ្លិច `type()` ត្រលប់ `complex` ជា class របស់ `num3` គឺ `<class 'complex'>`"
                    ]
                ],
                [
                    [
                        "ក្នុងភាសា Python បញ្ជី (list) គឺជាទិន្នន័យ (data structure) ដែលអាចផ្ទុកការប្រមូលទិន្នន័យដែលមានលំដាប់។ មិនដូច Array ក្នុងភាសាមួយចំនួនទេ បញ្ជីក្នុង Python មានភាពបត់បែនខ្លាំង៖",
                        [
                            "អាចមានទិន្នន័យដូចគ្នា",
                            "**អាចផ្លាស់ប្តូរបាន (Mutable)**: ទិន្នន័យអាចត្រូវបានកែប្រែ ជំនួស ឬលុបចេញបាន",
                            "**មានលំដាប់ (Ordered)**: ទិន្នន័យរក្សាលំដាប់ដែលពួកគេត្រូវបានបន្ថែម",
                            "**ផ្អែកលើសន្ទស្សន៍ (Index-based)**: ទិន្នន័យត្រូវបានចូលប្រើដោយប្រើទីតាំងរបស់វា (ចាប់ផ្តើមពីលេខ 0)",
                            "ផ្អែកលើសន្ទស្សន៍: ទិន្នន័យត្រូវបានចូលប្រើដោយប្រើទីតាំងរបស់វា (ចាប់ផ្តើមពីលេខ 0)"
                        ]
                    ],
                    [
                        "បញ្ជីអាចត្រូវបានបង្កើតឡើងតាមវិធីជាច្រើន ដូចជាការប្រើតង្កៀបជ្រុង, មុខងារ list() ឬដោយការធ្វើដដែលៗនូវធាតុ។ តោះមកមើលវិធីនីមួយៗម្តងមួយៗជាមួយនឹងឧទាហរណ៍។",
                        [
                            "**1. ការប្រើតង្កៀបជ្រុង**",
                            "យើងប្រើតង្កៀបជ្រុង `[]` ដើម្បីបង្កើតបញ្ជីដោយផ្ទាល់។",
                            "**ឧទាហរណ៍**: ការបង្កើតបញ្ជីជាមួយនឹង **លេខចំនួនគត់**, **អក្សរ**, និង **ប្រភេទទិន្នន័យចម្រុះ**។"
                        ],
                        [
                            "**2. ការប្រើប្រាស់មុខងារ `list()` Constructor**",
                            "យើងក៏អាចបង្កើតបញ្ជីមួយដោយបញ្ជូន iterable (ដូចជា `tuple`, `string` ឬបញ្ជីផ្សេងទៀត) ទៅមុខងារ `list()`។",
                            "**ឧទាហរណ៍**: ការបង្កើតបញ្ជីពី `tuple` និង `string`"
                        ],
                        [
                            "**3. ការបង្កើតបញ្ជីដែលមានធាតុដដែលៗ**",
                            "យើងអាចប្រើប្រាស់ប្រតិបត្តិករគុណ * ដើម្បីបង្កើតបញ្ជីដែលមានធាតុដដែលៗ។",
                            "**ឧទាហរណ៍**: ការបង្កើតបញ្ជីដែលមានតម្លៃដដែលៗ។"
                        ]
                    ],
                    [
                        "ធាតុនៅក្នុងបញ្ជីត្រូវបានចូលប្រើដោយប្រើសន្ទស្សន៍ (indexing)។ សន្ទស្សន៍របស់ Python ចាប់ផ្តើមពី `0` ដូច្នេះ `a[0]` ផ្តល់ធាតុទីមួយ។ សន្ទស្សន៍អវិជ្ជមានអនុញ្ញាតឱ្យចូលប្រើពីខាងចុង (ឧទាហរណ៍ `-1` ផ្តល់ធាតុចុងក្រោយ)។",
                        [
                            "**សន្ទស្សន៍វិជ្ជមាន**",
                            "ធាតុនៅក្នុងបញ្ជីត្រូវបានដាក់សន្ទស្សន៍ចាប់ផ្តើមពី `0` សម្រាប់ធាតុដំបូង។ អ្នកអាចចូលប្រើធាតុណាមួយដោយដាក់សន្ទស្សន៍របស់វានៅក្នុងតង្កៀបជ្រុង `[]` បន្ទាប់ពីឈ្មោះបញ្ជី។"
                        ],
                        [
                            "**សន្ទស្សន៍អវិជ្ជមាន**",
                            "អ្នកក៏អាចចូលប្រើធាតុពីខាងចុងនៃបញ្ជីដោយប្រើសន្ទស្សន៍អវិជ្ជមាន។ ធាតុចុងក្រោយគឺនៅសន្ទស្សន៍ `-1`, ធាតុទីពីរបន្ទាប់គឺនៅ `-2` ជាដើម។ នេះជាវិធីងាយស្រួលដើម្បីទទួលបានធាតុពីខាងចុងដោយមិនចាំបាច់ដឹងពីប្រវែងនៃបញ្ជី។"
                        ],
                        [
                            "**ការកាត់ផ្នែក (ជួរនៃសន្ទស្សន៍)**",
                            "ការកាត់ផ្នែក (slicing) អនុញ្ញាតឱ្យអ្នកទទួលបានបញ្ជីថ្មីដែលមានជួរនៃធាតុពីបញ្ជីដែលមានស្រាប់។ សញ្ញាសម្គាល់គឺ `[start:end]`។ ការកាត់ផ្នែករួមបញ្ចូលទាំងសន្ទស្សន៍ `start` ប៉ុន្តែមិនរាប់បញ្ចូលសន្ទស្សន៍ `end` ឡើយ។",
                            [
                                "**ការកាត់ផ្នែកមូលដ្ឋាន:**",
                                "**ការកាត់ផ្នែកពីការចាប់ផ្តើម:** លុបចោលសន្ទស្សន៍ចាប់ផ្តើមដើម្បីចាប់ផ្តើមពីធាតុទីមួយ។",
                                "**ការកាត់ផ្នែកទៅខាងចុង:** លុបចោលសន្ទស្សន៍ចុងក្រោយដើម្បីទៅដល់ធាតុចុងក្រោយ។"
                            ]
                        ],
                        [
                            "**ជួរនៃសន្ទស្សន៍អវិជ្ជមាន**",
                            "អ្នកអាចបញ្ចូលគ្នារវាងការកាត់ផ្នែកជាមួយសន្ទស្សន៍អវិជ្ជមានដើម្បីជ្រើសរើសជួរនៃធាតុពីខាងចុងនៃបញ្ជី។ ច្បាប់ដដែលៗត្រូវបានអនុវត្ត៖ សន្ទស្សន៍ `start` គឺរាប់បញ្ចូល ហើយសន្ទស្សន៍ `end` មិនរាប់បញ្ចូល។"
                        ],
                        [
                            "**ពិនិត្យមើលថាតើធាតុមានដែរឬទេ**",
                            "ប្រើពាក្យគន្លឹះ `in` ដើម្បីពិនិត្យមើលវត្តមាននៃធាតុនៅក្នុងបញ្ជីមួយ។ នេះនឹងត្រលប់តម្លៃ Boolean (`True` ឬ `False`)។ នេះជាវិធីលឿននិងងាយស្រួលអានដើម្បីពិនិត្យមើលវត្តមាន។"
                        ]
                    ],
                    [
                        [
                            "**ផ្លាស់ប្តូរតម្លៃធាតុ**",
                            "អ្នកអាចផ្លាស់ប្តូរតម្លៃនៃធាតុជាក់លាក់មួយនៅក្នុងបញ្ជីដោយយោងទៅសន្ទស្សន៍របស់វា ហើយកំណត់តម្លៃថ្មីទៅវា។"
                        ],
                        [
                            "**ផ្លាស់ប្តូរជួរនៃតម្លៃធាតុ**",
                            "អ្នកអាចផ្លាស់ប្តូរជួរនៃធាតុក្នុងបញ្ជីដោយបញ្ជាក់ពីការកាត់ផ្នែក (slice) និងកំណត់ iterable ថ្មីមួយ (ដូចជាបញ្ជីផ្សេងទៀត) ទៅវា។ ចំនួនធាតុថ្មីមិនចាំបាច់ត្រូវគ្នានឹងចំនួនធាតុដែលត្រូវជំនួសនោះទេ។"
                        ],
                        [
                            "**បញ្ចូលធាតុ**",
                            "ដើម្បីបញ្ចូលធាតុថ្មីទៅក្នុងបញ្ជីដោយមិនជំនួសធាតុដែលមានស្រាប់ណាមួយទេ សូមប្រើមុខងារ `insert()`។ អាគុយម៉ង់ទីមួយ (first argument) គឺជាសន្ទស្សន៍ដែលអ្នកចង់បញ្ចូលធាតុ ហើយទីពីរគឺជាតម្លៃរបស់ធាតុ។",
                            "មុខងារ `insert()` បន្ថែម `'kiwi'` នៅសន្ទស្សន៍ទី 1 ដោយរំកិលធាតុដើម (`'banana'` និង `'cherry'`) ទៅខាងស្តាំ។"
                        ]
                    ],
                    [
                        [
                            "**បន្ថែមធាតុទៅខាងចុង**",
                            "មុខងារ `append()` បន្ថែមធាតុតែមួយទៅ **ខាងចុង** នៃបញ្ជី។ នេះជាវិធីសាមញ្ញបំផុតដើម្បីបន្ថែមធាតុទៅក្នុងបញ្ជី។",
                            "ធាតុថ្មី `'orange'` ត្រូវបានបន្ថែមនៅខាងចុងនៃបញ្ជី fruits។"
                        ],
                        [
                            "**បញ្ចូលធាតុ**",
                            "មុខងារ `insert()` បន្ថែមធាតុមួយនៅ **សន្ទស្សន៍ដែលបានកំណត់** នៅក្នុងបញ្ជី។ នេះរំកិលធាតុដែលនៅបន្ទាប់ទាំងអស់ទៅខាងស្តាំដើម្បីបង្កើតកន្លែងសម្រាប់ធាតុថ្មី។ វាទទួលយកអាគុយម៉ង់ពីរ៖ សន្ទស្សន៍ និងធាតុដែលត្រូវបញ្ចូល។",
                            "`'kiwi'` ត្រូវបានបញ្ចូលនៅសន្ទស្សន៍ `1` ដោយរំកិល `'banana'` និង `'cherry'` ទៅសន្ទស្សន៍ `2` និង `3` រៀងៗខ្លួន។"
                        ],
                        [
                            "**ពង្រីកបញ្ជី**",
                            "មុខងារ `extend()` បន្ថែមធាតុទាំងអស់ពី iterable មួយទៀត (ដូចជាបញ្ជី មួយទៀត tuple ឬ set) ទៅ **ខាងចុង** នៃបញ្ជីបច្ចុប្បន្ន។ នេះជាវិធីដែលមានប្រសិទ្ធភាពជាងក្នុងការភ្ជាប់បញ្ជីជាងការប្រើប្រាស់ប្រតិបត្តិករ `+`។",
                            "បញ្ជី `fruits` ឥឡូវនេះមានធាតុទាំងអស់ពី `tropical_fruits`។"
                        ],
                        [
                            "**បន្ថែម iterable ណាមួយ**",
                            "ទាំងមុខងារ `extend()` និងប្រតិបត្តិករភ្ជាប់បញ្ជី (`+`) អាចបន្ថែមធាតុពីវត្ថុ iterable ណាមួយ មិនមែនត្រឹមតែបញ្ជីផ្សេងទៀតទេ។ នេះរាប់បញ្ចូលទាំង tuples, sets, និង dictionaries។",
                            "**ឧទាហរណ៍នៃការប្រើ** `extend()` **ជាមួយ tuple:**",
                            "**ឧទាហរណ៍នៃការប្រើប្រាស់ប្រតិបត្តិករ** `+` **ជាមួយបញ្ជី និង tuple:**",
                            "**ចំណាំ:** នៅពេលប្រើ `+` ដើម្បីបន្ថែម tuple អ្នកត្រូវតែបម្លែង tuple នោះទៅជាបញ្ជីសិនដោយប្រើ `list()`។ មុខងារ `extend()` នឹងគ្រប់គ្រងការបម្លែងនេះដោយស្វ័យប្រវត្តិ។"
                        ]
                    ],
                    [
                        [
                            "**លុបធាតុដែលបានបញ្ជាក់**",
                            "មុខងារ `remove()` លុបការលេចឡើង **លើកដំបូង** នៃធាតុដែលបានបញ្ជាក់ពីបញ្ជី។",
                            "ទោះបីជា 'banana' លេចឡើងពីរដងក៏ដោយ `remove()` លុបតែធាតុដំបូងដែលវាឃើញ។"
                        ],
                        [
                            "**លុបសន្ទស្សន៍ដែលបានបញ្ជាក់**",
                            "អ្នកអាចលុបធាតុមួយនៅទីតាំងជាក់លាក់ដោយប្រើមុខងារ `pop()` ឬពាក្យគន្លឹះ `del`។",
                            "`pop()` **Method:** មុខងារនេះលុបធាតុនៅសន្ទស្សន៍ដែលបានបញ្ជាក់ ហើយ **ត្រលប់ធាតុដែលបានលុបនោះ**។ ប្រសិនបើអ្នកមិនបញ្ជាក់សន្ទស្សន៍ទេ វានឹងលុបនិងត្រលប់ **ធាតុចុងក្រោយ**។",
                            "`del` **Keyword:** ពាក្យគន្លឹះនេះលុបធាតុមួយនៅសន្ទស្សន៍ដែលបានបញ្ជាក់។ មិនដូច `pop()` ទេ វា **មិនត្រលប់ធាតុដែលបានលុបនោះ**។ អ្នកក៏អាចប្រើ `del` ដើម្បីលុបផ្នែកទាំងមូល ឬបញ្ជីទាំងមូលផងដែរ។"
                        ],
                        [
                            "**សម្អាតបញ្ជី**",
                            "មុខងារ `clear()` សម្អាតបញ្ជីទាំងមូល ធ្វើឱ្យវាក្លាយជាបញ្ជីទទេ `[]`។ វត្ថុបញ្ជីខ្លួនឯងនៅតែមាន ប៉ុន្តែមាតិកាទាំងអស់របស់វាត្រូវបានលុបចេញ។"
                        ]
                    ],
                    [
                        [
                            "**ការរង្វិលជុំតាមបញ្ជី**",
                            "វិធីទូទៅបំផុតនិងជាលក្ខណៈ Pythonic ដើម្បីរង្វិលជុំតាមបញ្ជីគឺដោយប្រើរង្វិលជុំ `for`។ វិធីនេះធ្វើការរង្វិលជុំដោយផ្ទាល់លើធាតុនីមួយៗនៅក្នុងបញ្ជី។"
                        ],
                        [
                            "**ការរង្វិលជុំតាមលេខសន្ទស្សន៍**",
                            "អ្នកក៏អាចរង្វិលជុំតាមបញ្ជីដោយលេខសន្ទស្សន៍របស់វាផងដែរ។ ដើម្បីធ្វើដូចនេះ សូមប្រើមុខងារ `range()` និង `len()` ជាមួយគ្នា។ `len()` ផ្តល់ឱ្យអ្នកនូវចំនួនធាតុនៅក្នុងបញ្ជី ហើយ `range()` បង្កើតលំដាប់នៃលេខពី `0` ទៅប្រវែងនោះ។"
                        ],
                        [
                            "**ការប្រើរង្វិលជុំ While**",
                            "អ្នកក៏អាចប្រើរង្វិលជុំ `while` ដើម្បីរង្វិលជុំតាមបញ្ជីដោយរក្សាសន្ទស្សន៍ដោយដៃ។ វិធីនេះមិនសូវប្រើញឹកញាប់សម្រាប់ការរង្វិលជុំបញ្ជីធម្មតាទេ ប៉ុន្តែមានប្រយោជន៍នៅពេលអ្នកត្រូវការការគ្រប់គ្រងបន្ថែមលើការដំណើរការនៃរង្វិលជុំ។"
                        ],
                        [
                            "**ការរង្វិលជុំដោយប្រើ List Comprehension**",
                            "List comprehension ផ្តល់នូវវិធីសង្ខេបនិងស្រស់ស្អាតដើម្បីបង្កើតបញ្ជីថ្មីពីបញ្ជីដែលមានស្រាប់ដោយមានបន្ទាត់កូដតែមួយ។ វាជាញឹកញាប់ងាយស្រួលអាននិងលឿនជាងរង្វិលជុំ `for` បែបប្រពៃណីសម្រាប់ការដំណើរការសាមញ្ញ។"
                        ]
                    ]
                ]
            ]
        }
    },
    "comming_soon": {
        "title": "មកដល់ឆាប់ៗនេះ!",
        "description": "យើងកំពុងខិតខំប្រឹងប្រែងដើម្បីនាំមកជូនអ្នកនូវខ្លឹមសារដ៏ល្អបំផុតដែលអាចធ្វើទៅបាន។ រង់ចាំព័ត៌មានថ្មីៗ!"
    }
}