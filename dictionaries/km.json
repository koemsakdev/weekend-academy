{
    "sidebar": {
        "title": "មេរៀនណែនាំ",
        "version": "ជំនាន់ទី ១.០.០",
        "search_placeholder": "ស្វែងរក",
        "python": "Python",
        "python.overview": "និយមន័យទូទៅ",
        "python.variable": "អថេរ",
        "python.data-type": "ប្រភេទទិន្នន័យ",
        "python.operator": "ប្រតិបត្តិករ",
        "python.input-output": "បញ្ចូល & លទ្ធផល",
        "python.control-flow": "លំហូរគ្រប់គ្រង",
        "python.loop": "រង្វិលជុំ",
        "python.function": "ទម្រង់មុខងារ",
        "python.quiz": "សំណួរ"
    },
    "contents": {
        "python.overview": {
            "title": [
                "១. តើអ្វីទៅជា Python?",
                "២. កន្ទុយឯកសារ Python",
                "៣. របៀបដំឡើង Python",
                "៤. របៀបពិនិត្យថាតើ Python បានដំឡើងរួចឬនៅ",
                "៥. កម្មវិធី Python ដំបូង",
                "៦. Python Comments"
            ],
            "description": [
                "Python គឺជាភាសាកុំព្យូទ័រកម្រិតខ្ពស់ ដែលត្រូវបានបង្កើតឡើងដោយ Guido van Rossum នៅឆ្នាំ 1991។ វាសាមញ្ញ ងាយស្រួលអាន ហើយអាចប្រើបានក្នុងវិស័យជាច្រើនដូចជា កម្មវិធីគេហទំព័រ វិទ្យាសាស្ត្រទិន្នន័យ បញ្ញាសិប្បនិម្មិត ការស្វ័យប្រវត្តិកម្ម និងហ្គេម។",
                "ឯកសារ Python ប្រើកន្ទុយ `.py`។ ឧទាហរណ៍៖ `hello.py`។",
                [
                    "ចូលទៅកាន់",
                    "ទាញយក និងដំឡើងជំនាន់ចុងក្រោយ។",
                    "លើ Windows ត្រូវ ចុចធីក `Add Python to PATH` មុនពេលដំឡើង។"
                ],
                "បើក Command Prompt (Windows) ឬ Terminal (Mac/Linux) ហើយវាយពាក្យ៖",
                "បង្កើតឯកសារឈ្មោះ `hello.py`។ ឧទាហរណ៍៖",
                [
                    "Comments ក្នុង Python គឺជាបន្ទាត់កូដ ដែលត្រូវបាន មិនអើពើដោយ Interpreter របស់ Python។ វាត្រូវបានប្រើសម្រាប់ពន្យល់អំពីកូដ ធ្វើឱ្យកូដងាយអាន ឬប្រើដើម្បីបិទបន្ទាត់កូដមួយចំនួនបណ្តោះអាសន្នក្នុងពេល Debugging។",
                    "**Single-line comment** → ចាប់ផ្តើមដោយ `#`",
                    "**Multi-line comment** → ប្រើ `#` ជាបន្ទាត់ច្រើន ឬប្រើ `\"\"\" ... \"\"\"` ដើម្បីបិតកូដច្រើនបន្ទាត់។"
                ]
            ]
        },
        "python.variable": {
            "title": [
                "១. អ្វីទៅជាអថេរ?",
                "២. ការបង្កើតអថេរ",
                "៣. ច្បាប់នៃការដាក់ឈ្មោះអថេរ",
                "៤. ការកំណត់តម្លៃច្រើនទៅអថេរ",
                "៥. អថេរសកល និងអថេរតំបន់"
            ],
            "description": [
                "អថេរគឺជាប្រអប់សម្រាប់ផ្ទុកតម្លៃទិន្នន័យ (data values)។ នៅក្នុងភាសា Python អ្នកមិនចាំបាច់ប្រកាសប្រភេទទិន្នន័យ (data type) មុនពេលប្រើប្រាស់វាទេ ព្រោះ Python គឺជាភាសាដែលកំណត់ប្រភេទទិន្នន័យដោយស្វ័យប្រវត្តិ (dynamically typed language)។ អ្នកបកប្រែ (interpreter) នឹងកំណត់ប្រភេទទិន្នន័យរបស់អថេរដោយស្វ័យប្រវត្តិ ផ្អែកលើតម្លៃដែលអ្នកបានកំណត់ឱ្យវា។",
                "ដើម្បីបង្កើតអថេរ (variable) អ្នកគ្រាន់តែធ្វើការកំណត់តម្លៃ (assign) ទៅឱ្យឈ្មោះណាមួយដោយប្រើសញ្ញាស្មើ (`=`)។ អ្នកក៏អាចប្តូរតម្លៃរបស់អថេរនៅពេលក្រោយបានដែរ ទោះបីជាតម្លៃថ្មីមានប្រភេទទិន្នន័យខុសគ្នាក៏ដោយ។",
                [
                    "ឈ្មោះអថេរអាចខ្លីដូចជា `x` ឬ `y` ឬពិពណ៌នាបានច្រើនដូចជា `total_volume` ឬ `car_name`។ ច្បាប់សម្រាប់អថេររបស់ Python គឺ៖",
                    [
                        "ឈ្មោះអថេរត្រូវតែចាប់ផ្តើមដោយអក្សរ ឬសញ្ញា `_` (underscore)។",
                        "ឈ្មោះអថេរមិនអាចចាប់ផ្តើមដោយលេខទេ។",
                        "ឈ្មោះអថេរអាចមានតែតួអក្សរអក្សរ-លេខ (A-z, 0-9) និងសញ្ញា `_` (underscore) ប៉ុណ្ណោះ។",
                        "ឈ្មោះអថេរប្រកាន់អក្សរតូចធំ (**case-sensitive**) (`age`, `Age`, និង `AGE` គឺជាអថេរបីផ្សេងគ្នា)។"
                    ]
                ],
                "Python អនុញ្ញាតឱ្យអ្នកកំណត់តម្លៃទៅអថេរច្រើនក្នុងបន្ទាត់តែមួយ។ នេះត្រូវបានប្រើជាញឹកញាប់សម្រាប់ការបំបែកទិន្នន័យ (unpacking) ឬសម្រាប់ការកំណត់តម្លៃអថេរដោយសង្ខេប។",
                [
                    "អថេរតំបន់ (**local variable**) គឺជាអថេរដែលត្រូវបានកំណត់នៅក្នុង function មួយ ហើយអាចប្រើបានតែនៅក្នុង function នោះប៉ុណ្ណោះ។ អថេរសកល (**global variable**) ត្រូវបានកំណត់នៅខាងក្រៅ function ណាមួយ ហើយអាចត្រូវបានប្រើដោយអ្នកណាម្នាក់ ទាំងខាងក្នុង និងខាងក្រៅ function។",
                    "**ឧទាហរណ៍នៃអថេរតំបន់**៖",
                    "**ឧទាហរណ៍នៃអថេរសកល**៖"
                ]
            ]
        },
        "python.data-type": {
            "title": [
                "ប្រភេទទិន្នន័យ Python",
                "ប្រភេទទិន្នន័យលេខ Python",
                [
                    "ប្រភេទទិន្នន័យបញ្ជី (list) Python",
                    "ការបង្កើតបញ្ជី (list)",
                    "ការចូលប្រើធាតុក្នុងបញ្ជី",
                    "ការផ្លាស់ប្តូរធាតុក្នុងបញ្ជី (mutability)",
                    "ការបន្ថែមធាតុក្នុងបញ្ជី (append)",
                    "ការលុបធាតុក្នុងបញ្ជី (remove)",
                    "ការរង្វិលជុំបញ្ជី (loop)"
                ],
                [
                    "ប្រភេទទិន្នន័យ Tuple (tuple) Python",
                    "១. ការបង្កើត Tuple",
                    "២. ការចូលប្រើធាតុ",
                    "៣. Tuple មិនអាចកែប្រែបាន",
                    "៤. ការបំបែកធាតុនៅក្នុង Tuple",
                    "៥. Tuple ខាងក្នុង Tuple",
                    "៦. Tuple មានធាតុតែមួយ",
                    "៧. ការប្រើប្រាស់សញ្ញាលើ Tuple",
                    "៨. Tuple Functions"
                ],
                [
                    "ប្រភេទទិន្នន័យ String (str) Python",
                    "១. ការបង្កើត String",
                    "២. ការចូលប្រើធាតុក្នុង String តាម Index",
                    "៣. ការកាត់យកផ្នែក (Substring)",
                    "៤. ការតភ្ជាប់ String",
                    "៥. ប្រវែង String",
                    "៦. មិនអាចកែប្រែបាន (Error)",
                    "៧. ការធ្វើចម្លង String",
                    "៨. ការត្រួតពិនិត្យមានក្នុង String",
                    "៩. មុខងារ String"
                ],
                [
                    "ប្រភេទទិន្នន័យ Set (set) Python",
                    "១. ការបង្កើត Set",
                    "២. ការមិនអនុញ្ញាតឱ្យមានតម្លៃស្ទួន",
                    "៣. ការបញ្ចូលធាតុក្នុង Set",
                    "៤. ការបន្ថែមធាតុ",
                    "៥. ការបន្ថែមធាតុច្រើន",
                    "៦. ការលុបធាតុក្នុង Set (discard)",
                    "៧. ការលុបធាតុក្នុង Set (remove)",
                    "៨. ការផ្សំ Set (Union)",
                    "៩. ការចែករំលែកធាតុ (Intersection)",
                    "១០. ភាពខុសគ្នា (Difference)",
                    "១១. ភាពខុសគ្នាទាំងសងខាង (Symmetric Difference)",
                    "១២. ពិនិត្យការមាន (Membership)",
                    "១៣. ប្រវែង Set"
                ],
                [
                    "ប្រភេទទិន្នន័យ Dictionary (dict) Python",
                    "១. ការបង្កើត Dictionary",
                    "២. ការចូលប្រើតម្លៃតាម Key",
                    "៣. ការបន្ថែម Key-Value ថ្មី",
                    "៤. ការកែប្រែតម្លៃ",
                    "៥. ការលុប Key-Value (pop)",
                    "៦. ការលុបធាតុចុងក្រោយ (popitem)",
                    "៧. ការពិនិត្យមើលថា Key មានឬអត់",
                    "៨. ការ Loop តាម Dictionary (keys)",
                    "៩. ការ Loop តាម Dictionary (values)",
                    "១០. ការ Loop តាម Key និង Value",
                    "១១. ប្រវែង Dictionary",
                    "១២. Dictionary ជាស្រទាប់ច្រើន (Nested)"
                ],
                "សូមស្វាគមន៍មកកាន់ ប្រភេទទិន្នន័យរបស់ Python"
            ],
            "description": [
                [
                    "Python Data Types ត្រូវបានប្រើដើម្បីចាត់ថ្នាក់ទិន្នន័យផ្សេងៗគ្នា ដូចជា លេខ អក្សរ ឬតម្លៃពិត/មិនពិត។ ការចាត់ថ្នាក់នេះមានសារៈសំខាន់សម្រាប់អ្នកអភិវឌ្ឍន៍ដើម្បីគ្រប់គ្រងទិន្នន័យប្រកបដោយប្រសិទ្ធភាព ព្រោះវាជាអ្នកកំណត់ប្រតិបត្តិការដែលអាចត្រូវបានអនុវត្តលើទិន្នន័យជាក់លាក់ណាមួយ។ នៅក្នុងការសរសេរកម្មវិធីកុំព្យូទ័រ ប្រភេទទិន្នន័យបញ្ជាក់ពីប្រភេទទិន្នន័យដែលអាចត្រូវបានរក្សាទុកក្នុងអថេរ។ ឧទាហរណ៍៖",
                    "នៅទីនេះ **24** (លេខចំនួនគត់) ត្រូវបានកំណត់ទៅអថេរ `num`។ ដូច្នេះ ប្រភេទទិន្នន័យរបស់ `num` គឺជា class `int`។",
                    [
                        {
                            "type": "លេខ (Numeric)",
                            "class": "`int`, `float`, `complex`",
                            "description": "ផ្ទុកតម្លៃលេខ"
                        },
                        {
                            "type": "អក្សរ (String)",
                            "class": "`str`",
                            "description": "ផ្ទុកលំដាប់នៃតួអក្សរ"
                        },
                        {
                            "type": "លំដាប់ (Sequence)",
                            "class": "`list`, `tuple`, `range`",
                            "description": "ផ្ទុកការប្រមូលទិន្នន័យ"
                        },
                        {
                            "type": "ផែនទី (Mapping)",
                            "class": "`dict`",
                            "description": "ផ្ទុកទិន្នន័យក្នុងទម្រង់គូ key-value"
                        },
                        {
                            "type": "Boolean",
                            "class": "`bool`",
                            "description": "ផ្ទុក `True` ឬ `False`"
                        },
                        {
                            "type": "សំណុំ (Set)",
                            "class": "`set`, `frozenset`",
                            "description": "ផ្ទុកការប្រមូលទិន្នន័យដែលគ្មានភាពជាន់គ្នា (unique)"
                        }
                    ],
                    "ដោយសារតែអ្វីៗទាំងអស់គឺជា object នៅក្នុងការសរសេរកម្មវិធី Python ប្រភេទទិន្នន័យគឺជា classes ហើយអថេរគឺជា instances (object) នៃ classes ទាំងនេះ។"
                ],
                [
                    "នៅក្នុង Python ប្រភេទទិន្នន័យលេខត្រូវបានប្រើដើម្បីផ្ទុកតម្លៃលេខ។ ចំនួនគត់ (Integers), លេខទសភាគ (floating-point numbers) និងលេខកុំផ្លិច (complex numbers) ស្ថិតនៅក្រោមប្រភេទលេខរបស់ Python។ ពួកវាត្រូវបានកំណត់ជា classes `int`, `float` និង `complex` នៅក្នុង Python។",
                    [
                        "`int` - ផ្ទុកចំនួនគត់ដែលមានសញ្ញា (signed) និងមានប្រវែងគ្មានដែនកំណត់។",
                        "`float` - ផ្ទុកលេខទសភាគ (floating decimal points) និងមានភាពត្រឹមត្រូវរហូតដល់ 15 ខ្ទង់ទសភាគ។",
                        "`complex` - ផ្ទុកលេខកុំផ្លិច (complex numbers)។"
                    ],
                    "យើងអាចប្រើមុខងារ `type()` ដើម្បីដឹងថាអថេរ ឬតម្លៃមួយជាកម្មសិទ្ធិរបស់ class ណា។ តោះមើលឧទាហរណ៍៖",
                    "នៅក្នុងឧទាហរណ៍ខាងលើ យើងបានបង្កើតអថេរចំនួនបីដែលមានឈ្មោះ `num1`, `num2` និង `num3` ដែលមានតម្លៃ **5**, **5.0**, និង `1+2j` រៀងគ្នា។",
                    "យើងក៏បានប្រើមុខងារ `type()` ដើម្បីដឹងថាអថេរជាក់លាក់មួយជារបស់ class ណា។ ព្រោះថា៖",
                    [
                        "**5** គឺជាតម្លៃចំនួនគត់ `type()` ត្រលប់ `int` ជា class របស់ `num1` គឺ `<class 'int'>`",
                        "**2.0** គឺជាតម្លៃទសភាគ `type()` ត្រលប់ `float` ជា class របស់ `num2` គឺ `<class 'float'>`",
                        "`1 + 2j` គឺជាលេខកុំផ្លិច `type()` ត្រលប់ `complex` ជា class របស់ `num3` គឺ `<class 'complex'>`"
                    ]
                ],
                [
                    [
                        "ក្នុងភាសា Python បញ្ជី (list) គឺជាទិន្នន័យ (data structure) ដែលអាចផ្ទុកការប្រមូលទិន្នន័យដែលមានលំដាប់។ មិនដូច Array ក្នុងភាសាមួយចំនួនទេ បញ្ជីក្នុង Python មានភាពបត់បែនខ្លាំង៖",
                        [
                            "អាចមានទិន្នន័យដូចគ្នា",
                            "**អាចផ្លាស់ប្តូរបាន (Mutable)**: ទិន្នន័យអាចត្រូវបានកែប្រែ ជំនួស ឬលុបចេញបាន",
                            "**មានលំដាប់ (Ordered)**: ទិន្នន័យរក្សាលំដាប់ដែលពួកគេត្រូវបានបន្ថែម",
                            "**ផ្អែកលើសន្ទស្សន៍ (Index-based)**: ទិន្នន័យត្រូវបានចូលប្រើដោយប្រើទីតាំងរបស់វា (ចាប់ផ្តើមពីលេខ 0)",
                            "ផ្អែកលើសន្ទស្សន៍: ទិន្នន័យត្រូវបានចូលប្រើដោយប្រើទីតាំងរបស់វា (ចាប់ផ្តើមពីលេខ 0)"
                        ]
                    ],
                    [
                        "បញ្ជីអាចត្រូវបានបង្កើតឡើងតាមវិធីជាច្រើន ដូចជាការប្រើតង្កៀបជ្រុង, មុខងារ list() ឬដោយការធ្វើដដែលៗនូវធាតុ។ តោះមកមើលវិធីនីមួយៗម្តងមួយៗជាមួយនឹងឧទាហរណ៍។",
                        [
                            "**1. ការប្រើតង្កៀបជ្រុង**",
                            "យើងប្រើតង្កៀបជ្រុង `[]` ដើម្បីបង្កើតបញ្ជីដោយផ្ទាល់។",
                            "**ឧទាហរណ៍**: ការបង្កើតបញ្ជីជាមួយនឹង **លេខចំនួនគត់**, **អក្សរ**, និង **ប្រភេទទិន្នន័យចម្រុះ**។"
                        ],
                        [
                            "**2. ការប្រើប្រាស់មុខងារ `list()` Constructor**",
                            "យើងក៏អាចបង្កើតបញ្ជីមួយដោយបញ្ជូន iterable (ដូចជា `tuple`, `string` ឬបញ្ជីផ្សេងទៀត) ទៅមុខងារ `list()`។",
                            "**ឧទាហរណ៍**: ការបង្កើតបញ្ជីពី `tuple` និង `string`"
                        ],
                        [
                            "**3. ការបង្កើតបញ្ជីដែលមានធាតុដដែលៗ**",
                            "យើងអាចប្រើប្រាស់ប្រតិបត្តិករគុណ * ដើម្បីបង្កើតបញ្ជីដែលមានធាតុដដែលៗ។",
                            "**ឧទាហរណ៍**: ការបង្កើតបញ្ជីដែលមានតម្លៃដដែលៗ។"
                        ]
                    ],
                    [
                        "ធាតុនៅក្នុងបញ្ជីត្រូវបានចូលប្រើដោយប្រើសន្ទស្សន៍ (indexing)។ សន្ទស្សន៍របស់ Python ចាប់ផ្តើមពី `0` ដូច្នេះ `a[0]` ផ្តល់ធាតុទីមួយ។ សន្ទស្សន៍អវិជ្ជមានអនុញ្ញាតឱ្យចូលប្រើពីខាងចុង (ឧទាហរណ៍ `-1` ផ្តល់ធាតុចុងក្រោយ)។",
                        [
                            "**សន្ទស្សន៍វិជ្ជមាន**",
                            "ធាតុនៅក្នុងបញ្ជីត្រូវបានដាក់សន្ទស្សន៍ចាប់ផ្តើមពី `0` សម្រាប់ធាតុដំបូង។ អ្នកអាចចូលប្រើធាតុណាមួយដោយដាក់សន្ទស្សន៍របស់វានៅក្នុងតង្កៀបជ្រុង `[]` បន្ទាប់ពីឈ្មោះបញ្ជី។"
                        ],
                        [
                            "**សន្ទស្សន៍អវិជ្ជមាន**",
                            "អ្នកក៏អាចចូលប្រើធាតុពីខាងចុងនៃបញ្ជីដោយប្រើសន្ទស្សន៍អវិជ្ជមាន។ ធាតុចុងក្រោយគឺនៅសន្ទស្សន៍ `-1`, ធាតុទីពីរបន្ទាប់គឺនៅ `-2` ជាដើម។ នេះជាវិធីងាយស្រួលដើម្បីទទួលបានធាតុពីខាងចុងដោយមិនចាំបាច់ដឹងពីប្រវែងនៃបញ្ជី។"
                        ],
                        [
                            "**ការកាត់ផ្នែក (ជួរនៃសន្ទស្សន៍)**",
                            "ការកាត់ផ្នែក (slicing) អនុញ្ញាតឱ្យអ្នកទទួលបានបញ្ជីថ្មីដែលមានជួរនៃធាតុពីបញ្ជីដែលមានស្រាប់។ សញ្ញាសម្គាល់គឺ `[start:end]`។ ការកាត់ផ្នែករួមបញ្ចូលទាំងសន្ទស្សន៍ `start` ប៉ុន្តែមិនរាប់បញ្ចូលសន្ទស្សន៍ `end` ឡើយ។",
                            [
                                "**ការកាត់ផ្នែកមូលដ្ឋាន:**",
                                "**ការកាត់ផ្នែកពីការចាប់ផ្តើម:** លុបចោលសន្ទស្សន៍ចាប់ផ្តើមដើម្បីចាប់ផ្តើមពីធាតុទីមួយ។",
                                "**ការកាត់ផ្នែកទៅខាងចុង:** លុបចោលសន្ទស្សន៍ចុងក្រោយដើម្បីទៅដល់ធាតុចុងក្រោយ។"
                            ]
                        ],
                        [
                            "**ជួរនៃសន្ទស្សន៍អវិជ្ជមាន**",
                            "អ្នកអាចបញ្ចូលគ្នារវាងការកាត់ផ្នែកជាមួយសន្ទស្សន៍អវិជ្ជមានដើម្បីជ្រើសរើសជួរនៃធាតុពីខាងចុងនៃបញ្ជី។ ច្បាប់ដដែលៗត្រូវបានអនុវត្ត៖ សន្ទស្សន៍ `start` គឺរាប់បញ្ចូល ហើយសន្ទស្សន៍ `end` មិនរាប់បញ្ចូល។"
                        ],
                        [
                            "**ពិនិត្យមើលថាតើធាតុមានដែរឬទេ**",
                            "ប្រើពាក្យគន្លឹះ `in` ដើម្បីពិនិត្យមើលវត្តមាននៃធាតុនៅក្នុងបញ្ជីមួយ។ នេះនឹងត្រលប់តម្លៃ Boolean (`True` ឬ `False`)។ នេះជាវិធីលឿននិងងាយស្រួលអានដើម្បីពិនិត្យមើលវត្តមាន។"
                        ]
                    ],
                    [
                        [
                            "**ផ្លាស់ប្តូរតម្លៃធាតុ**",
                            "អ្នកអាចផ្លាស់ប្តូរតម្លៃនៃធាតុជាក់លាក់មួយនៅក្នុងបញ្ជីដោយយោងទៅសន្ទស្សន៍របស់វា ហើយកំណត់តម្លៃថ្មីទៅវា។"
                        ],
                        [
                            "**ផ្លាស់ប្តូរជួរនៃតម្លៃធាតុ**",
                            "អ្នកអាចផ្លាស់ប្តូរជួរនៃធាតុក្នុងបញ្ជីដោយបញ្ជាក់ពីការកាត់ផ្នែក (slice) និងកំណត់ iterable ថ្មីមួយ (ដូចជាបញ្ជីផ្សេងទៀត) ទៅវា។ ចំនួនធាតុថ្មីមិនចាំបាច់ត្រូវគ្នានឹងចំនួនធាតុដែលត្រូវជំនួសនោះទេ។"
                        ],
                        [
                            "**បញ្ចូលធាតុ**",
                            "ដើម្បីបញ្ចូលធាតុថ្មីទៅក្នុងបញ្ជីដោយមិនជំនួសធាតុដែលមានស្រាប់ណាមួយទេ សូមប្រើមុខងារ `insert()`។ អាគុយម៉ង់ទីមួយ (first argument) គឺជាសន្ទស្សន៍ដែលអ្នកចង់បញ្ចូលធាតុ ហើយទីពីរគឺជាតម្លៃរបស់ធាតុ។",
                            "មុខងារ `insert()` បន្ថែម `'kiwi'` នៅសន្ទស្សន៍ទី 1 ដោយរំកិលធាតុដើម (`'banana'` និង `'cherry'`) ទៅខាងស្តាំ។"
                        ]
                    ],
                    [
                        [
                            "**បន្ថែមធាតុទៅខាងចុង**",
                            "មុខងារ `append()` បន្ថែមធាតុតែមួយទៅ **ខាងចុង** នៃបញ្ជី។ នេះជាវិធីសាមញ្ញបំផុតដើម្បីបន្ថែមធាតុទៅក្នុងបញ្ជី។",
                            "ធាតុថ្មី `'orange'` ត្រូវបានបន្ថែមនៅខាងចុងនៃបញ្ជី fruits។"
                        ],
                        [
                            "**បញ្ចូលធាតុ**",
                            "មុខងារ `insert()` បន្ថែមធាតុមួយនៅ **សន្ទស្សន៍ដែលបានកំណត់** នៅក្នុងបញ្ជី។ នេះរំកិលធាតុដែលនៅបន្ទាប់ទាំងអស់ទៅខាងស្តាំដើម្បីបង្កើតកន្លែងសម្រាប់ធាតុថ្មី។ វាទទួលយកអាគុយម៉ង់ពីរ៖ សន្ទស្សន៍ និងធាតុដែលត្រូវបញ្ចូល។",
                            "`'kiwi'` ត្រូវបានបញ្ចូលនៅសន្ទស្សន៍ `1` ដោយរំកិល `'banana'` និង `'cherry'` ទៅសន្ទស្សន៍ `2` និង `3` រៀងៗខ្លួន។"
                        ],
                        [
                            "**ពង្រីកបញ្ជី**",
                            "មុខងារ `extend()` បន្ថែមធាតុទាំងអស់ពី iterable មួយទៀត (ដូចជាបញ្ជី មួយទៀត tuple ឬ set) ទៅ **ខាងចុង** នៃបញ្ជីបច្ចុប្បន្ន។ នេះជាវិធីដែលមានប្រសិទ្ធភាពជាងក្នុងការភ្ជាប់បញ្ជីជាងការប្រើប្រាស់ប្រតិបត្តិករ `+`។",
                            "បញ្ជី `fruits` ឥឡូវនេះមានធាតុទាំងអស់ពី `tropical_fruits`។"
                        ],
                        [
                            "**បន្ថែម iterable ណាមួយ**",
                            "ទាំងមុខងារ `extend()` និងប្រតិបត្តិករភ្ជាប់បញ្ជី (`+`) អាចបន្ថែមធាតុពីវត្ថុ iterable ណាមួយ មិនមែនត្រឹមតែបញ្ជីផ្សេងទៀតទេ។ នេះរាប់បញ្ចូលទាំង tuples, sets, និង dictionaries។",
                            "**ឧទាហរណ៍នៃការប្រើ** `extend()` **ជាមួយ tuple:**",
                            "**ឧទាហរណ៍នៃការប្រើប្រាស់ប្រតិបត្តិករ** `+` **ជាមួយបញ្ជី និង tuple:**",
                            "**ចំណាំ:** នៅពេលប្រើ `+` ដើម្បីបន្ថែម tuple អ្នកត្រូវតែបម្លែង tuple នោះទៅជាបញ្ជីសិនដោយប្រើ `list()`។ មុខងារ `extend()` នឹងគ្រប់គ្រងការបម្លែងនេះដោយស្វ័យប្រវត្តិ។"
                        ]
                    ],
                    [
                        [
                            "**លុបធាតុដែលបានបញ្ជាក់**",
                            "មុខងារ `remove()` លុបការលេចឡើង **លើកដំបូង** នៃធាតុដែលបានបញ្ជាក់ពីបញ្ជី។",
                            "ទោះបីជា 'banana' លេចឡើងពីរដងក៏ដោយ `remove()` លុបតែធាតុដំបូងដែលវាឃើញ។"
                        ],
                        [
                            "**លុបសន្ទស្សន៍ដែលបានបញ្ជាក់**",
                            "អ្នកអាចលុបធាតុមួយនៅទីតាំងជាក់លាក់ដោយប្រើមុខងារ `pop()` ឬពាក្យគន្លឹះ `del`។",
                            "`pop()` **Method:** មុខងារនេះលុបធាតុនៅសន្ទស្សន៍ដែលបានបញ្ជាក់ ហើយ **ត្រលប់ធាតុដែលបានលុបនោះ**។ ប្រសិនបើអ្នកមិនបញ្ជាក់សន្ទស្សន៍ទេ វានឹងលុបនិងត្រលប់ **ធាតុចុងក្រោយ**។",
                            "`del` **Keyword:** ពាក្យគន្លឹះនេះលុបធាតុមួយនៅសន្ទស្សន៍ដែលបានបញ្ជាក់។ មិនដូច `pop()` ទេ វា **មិនត្រលប់ធាតុដែលបានលុបនោះ**។ អ្នកក៏អាចប្រើ `del` ដើម្បីលុបផ្នែកទាំងមូល ឬបញ្ជីទាំងមូលផងដែរ។"
                        ],
                        [
                            "**សម្អាតបញ្ជី**",
                            "មុខងារ `clear()` សម្អាតបញ្ជីទាំងមូល ធ្វើឱ្យវាក្លាយជាបញ្ជីទទេ `[]`។ វត្ថុបញ្ជីខ្លួនឯងនៅតែមាន ប៉ុន្តែមាតិកាទាំងអស់របស់វាត្រូវបានលុបចេញ។"
                        ]
                    ],
                    [
                        [
                            "**ការរង្វិលជុំតាមបញ្ជី**",
                            "វិធីទូទៅបំផុតនិងជាលក្ខណៈ Pythonic ដើម្បីរង្វិលជុំតាមបញ្ជីគឺដោយប្រើរង្វិលជុំ `for`។ វិធីនេះធ្វើការរង្វិលជុំដោយផ្ទាល់លើធាតុនីមួយៗនៅក្នុងបញ្ជី។"
                        ],
                        [
                            "**ការរង្វិលជុំតាមលេខសន្ទស្សន៍**",
                            "អ្នកក៏អាចរង្វិលជុំតាមបញ្ជីដោយលេខសន្ទស្សន៍របស់វាផងដែរ។ ដើម្បីធ្វើដូចនេះ សូមប្រើមុខងារ `range()` និង `len()` ជាមួយគ្នា។ `len()` ផ្តល់ឱ្យអ្នកនូវចំនួនធាតុនៅក្នុងបញ្ជី ហើយ `range()` បង្កើតលំដាប់នៃលេខពី `0` ទៅប្រវែងនោះ។"
                        ],
                        [
                            "**ការប្រើរង្វិលជុំ While**",
                            "អ្នកក៏អាចប្រើរង្វិលជុំ `while` ដើម្បីរង្វិលជុំតាមបញ្ជីដោយរក្សាសន្ទស្សន៍ដោយដៃ។ វិធីនេះមិនសូវប្រើញឹកញាប់សម្រាប់ការរង្វិលជុំបញ្ជីធម្មតាទេ ប៉ុន្តែមានប្រយោជន៍នៅពេលអ្នកត្រូវការការគ្រប់គ្រងបន្ថែមលើការដំណើរការនៃរង្វិលជុំ។"
                        ],
                        [
                            "**ការរង្វិលជុំដោយប្រើ List Comprehension**",
                            "List comprehension ផ្តល់នូវវិធីសង្ខេបនិងស្រស់ស្អាតដើម្បីបង្កើតបញ្ជីថ្មីពីបញ្ជីដែលមានស្រាប់ដោយមានបន្ទាត់កូដតែមួយ។ វាជាញឹកញាប់ងាយស្រួលអាននិងលឿនជាងរង្វិលជុំ `for` បែបប្រពៃណីសម្រាប់ការដំណើរការសាមញ្ញ។"
                        ]
                    ]
                ],
                [
                    "**Python Tuple (ទុប័ល)** គឺ​ជា​បណ្តុំ​នៃ​វត្ថុ (objects) ដែល​មាន **លំដាប់​ច្បាស់លាស់ (ordered)** និង **មិន​អាច​កែប្រែ​បាន (immutable)**។ ដូចទៅនឹង List ដែរ Tuple អាច​ផ្ទុក​ប្រភេទ​ទិន្នន័យ​ផ្សេងៗ (ដូចជា​លេខ​គត់, អក្សរ, ជាដើម) ហើយ​អនុញ្ញាត​ឱ្យ​មាន​តម្លៃ​ស្ទួន (duplicate values)។ ភាព​ខុសគ្នា​សំខាន់​គឺ​លក្ខណៈ **មិន​អាច​កែប្រែ​បាន** របស់​វា៖ នៅ​ពេល​ដែល Tuple ត្រូវ​បាន​បង្កើត​ហើយ អ្នក​មិន​អាច​ប្តូរ, បន្ថែម, ឬ​លុប​ធាតុ​របស់​វា​បាន​ទេ។ Tuple ជាទូទៅ​ត្រូវ​បាន​បង្កើត​ដោយ​ប្រើ **វង់ក្រចក** `()`។ វា​ត្រូវ​បាន​គេ​ប្រើ​សម្រាប់​ទិន្នន័យ​ដែល​មិន​គួរ​ផ្លាស់ប្តូរ ដូចជា​កូអរដោណេ (coordinates) ឬ​ការ​កំណត់​រចនាសម្ព័ន្ធ​ថេរ (fixed configuration settings) ហើយ​អាច​ប្រើ​ជា​កូនសោ (keys) ក្នុង Dictionary បាន (ដោយសារ​វា​មិន​អាច​កែប្រែ​បាន)។",
                    "Tuple ត្រូវបានបង្កើតដោយប្រើសញ្ញា `()`។ វាអាចផ្ទុកតម្លៃជាប្រភេទផ្សេងៗគ្នា។",
                    "យើងចូលប្រើធាតុតាម **index** ដែលចាប់ផ្តើមពីលេខ `0`។",
                    "Tuple មិនអាចកែប្រែបាន។ ប្រសិនបើព្យាយាមកែវា នឹងបង្ហាញ Error។",
                    "ការបំបែក (Unpacking) អនុញ្ញាតឲ្យយើងចែកតម្លៃក្នុង Tuple ទៅអញ្ញត្តិផ្សេងៗ។",
                    "Tuple អាចមាន Tuple ផ្សេងទៀតនៅខាងក្នុង។ យើងប្រើ index ច្រើនដើម្បីចូលប្រើ។",
                    "ប្រសិនបើ Tuple មានតែមួយធាតុ ត្រូវដាក់សញ្ញា `,` បន្ទាប់។ បើមិនដាក់ វាមិនមែនជា Tuple ទេ។",
                    "Tuple អាចចម្លងដោយប្រើ `*` និងភ្ជាប់ជាមួយ Tuple ផ្សេងដោយប្រើ `+`។",
                    "មុខងារដែលមានប្រយោជន៍: `len()` = ចំនួនធាតុ, `max()` = តម្លៃធំបំផុត, `min()` = តម្លៃតូចបំផុត, `count()` = រាប់ចំនួនតម្លៃដូចគ្នា។"
                ],
                [
                    "នៅក្នុងភាសា Python, string (ខ្សែអក្សរ) គឺជា​លំដាប់​នៃ​តួអក្សរ (characters) ដែល​ត្រូវ​បាន​ដាក់​ក្នុង​សញ្ញា​ដក​ស្រង់ (quotes)។ វា​អាច​រួម​បញ្ចូល​ទាំង​អក្សរ, លេខ, និមិត្តសញ្ញា ឬ​ចន្លោះ​ទំនេរ (spaces)។ ដោយសារ Python មិនមាន​ប្រភេទ​ទិន្នន័យ​តួអក្សរ​ដាច់​ដោយ​ឡែក (separate character type) ទេ សូម្បីតែ​តួអក្សរ​តែមួយ​ក៏​ត្រូវ​បាន​ចាត់​ទុក​ជា string ដែលមាន​ប្រវែង​មួយ​ដែរ។ String ត្រូវ​បាន​ប្រើប្រាស់​យ៉ាង​ទូលំទូលាយ​សម្រាប់​ការ​គ្រប់គ្រង​និង​ការ​បំលែង​ទិន្នន័យ​អត្ថបទ (text handling and manipulation)។",
                    "String ត្រូវបានបង្កើតដោយប្រើសញ្ញាដកស្រង់ (`\"` ឬ `'`)។ វាអាចផ្ទុកអក្សរ ពាក្យ ឬសញ្ញាផ្សេងៗបាន។",
                    "String គឺជាជួរដេកអក្សរ។ Index ចាប់ផ្តើមពីលេខ 0 ដូច្នេះ `greeting[0]` នឹងបានតួអក្សរដំបូង។",
                    "ការកាត់យក (Slicing) អនុញ្ញាតឲ្យយើងយកតួអក្សរផ្នែកមួយចេញ។ `greeting[6:14]` មានន័យថាចាប់ពី index 6 រហូតដល់មុន index 14។",
                    "ប្រើ `+` ដើម្បីភ្ជាប់ String ពីរ ឬច្រើនឲ្យជារឿងតែមួយ។",
                    "មុខងារ `len()` ប្រើសម្រាប់រាប់ចំនួនតួអក្សរទាំងអស់ រួមទាំងចន្លោះ (space)។",
                    "String មានលក្ខណៈ មិនអាចកែប្រែបាន។ នេះមានន័យថា យើងមិនអាចកែតួអក្សរផ្ទាល់បានទេ ត្រូវបង្កើត String ថ្មីជំនួស។",
                    "អាចចម្លង String ដោយប្រើ `*`។",
                    "ពាក្យគន្លឹះ `in` ប្រើសម្រាប់ពិនិត្យថា substring មួយមាននៅក្នុង String ឬអត់។",
                    "String មានមុខងារជាច្រើន៖ `upper()` = បម្លែងទៅអក្សរធំ, `capitalize()` = អក្សរដំបូងធំ, `replace()` = ជំនួសអក្សរផ្នែកមួយ។"
                ],
                [
                    [
                        "Set នៅក្នុង Python គឺជា សំណុំទិន្នន័យ (collection) ដែល មិនមានលំដាប់ និង មិនអនុញ្ញាតឱ្យមានតម្លៃស្ទួន។",
                        [
                            "នៅក្នុង Set មិនអាចមានតម្លៃដូចគ្នាច្រើនដងបានទេ។",
                            "ធាតុ (elements) ខាងក្នុង Set គឺ មិនអាចកែប្រែបាន ប៉ុន្តែ Set ខ្លួនវា អាចកែប្រែបាន (អាចបន្ថែម ឬលុបធាតុបាន)។",
                            "Set មានប្រយោជន៍សម្រាប់រក្សាទុកទិន្នន័យដែលមិនចង់ឲ្យមានតម្លៃស្ទួន ឬប្រើសម្រាប់ប្រតិបត្តិការ គណិតវិទ្យា ដូចជា **union (បញ្ចូលសំណុំ), intersection (តែធាតុដែលដូចគ្នា)** និង **difference (ភាពខុសគ្នា)**។"
                        ]
                    ],
                    "Set ត្រូវបានបង្កើតដោយប្រើ `{}` ហើយវាផ្ទុកតែតម្លៃ មិនស្ទួន។",
                    "តម្លៃស្ទួននឹងត្រូវបានយកចេញដោយស្វ័យប្រវត្តិ។",
                    "Set អាចផ្ទុកទិន្នន័យផ្សំៗបាន ប៉ុន្តែត្រូវជាអង្គភាពដែល មិនអាចកែប្រែបាន។",
                    "ប្រើ `.add()` ដើម្បីបន្ថែមធាតុតែមួយ។",
                    "ប្រើ `.update()` ដើម្បីបន្ថែមធាតុច្រើនក្នុងពេលតែមួយ។",
                    "`.discard()` លុបធាតុចេញ ប៉ុន្តែមិនបង្កកំហុស ប្រសិនបើធាតុមិនមាន។",
                    "`.remove()` លុបធាតុ ប៉ុន្តែបើធាតុមិនមាន នឹងបង្ហាញកំហុស។",
                    "ផ្សំទិន្នន័យពី Set ទាំងពីរ ចូលគ្នា (មិនមានតម្លៃស្ទួនឡើយ)។",
                    "Intersection ទៅរកតម្លៃដែលមានស្រដៀងគ្នា ក្នុង Set ទាំងពីរ។",
                    "បង្ហាញតម្លៃដែលមាននៅក្នុង Set ទីមួយ ប៉ុន្តែមិនមាននៅក្នុង Set ទីពីរ។",
                    "បង្ហាញតម្លៃដែលមាននៅក្នុង Set មួយ ប៉ុន្តែមិនមានក្នុងទាំងពីរម្ដង។",
                    "ប្រើ `in` ដើម្បីពិនិត្យថា ធាតុមាននៅក្នុង Set ឬអត់។",
                    "ប្រើ `len()` ដើម្បីរាប់ចំនួនធាតុទាំងអស់។"
                ],
                [
                    [
                        "Dictionary នៅក្នុង Python គឺជា សំណុំទិន្នន័យ (collection) ដែលរក្សាទុកជាគូ Key-Value។",
                        [
                            "រាល់ធាតុ (item) នីមួយៗមាន Key និង Value (ឧ. `\"name\": \"Sok\"`).",
                            "Key ត្រូវតែ **មិនស្ទួន** ហើយត្រូវជាទិន្នន័យ មិនអាចកែប្រែបាន (ដូចជា string ឬ number)។",
                            "Value អាចជាទិន្នន័យប្រភេទណាក៏បាន (string, number, list, ឬ dictionary ផ្សេងទៀត)។",
                            "Dictionary អាច **កែប្រែបាន** (mutable) ដូចជា បន្ថែម, កែប្រែ ឬលុបធាតុ។",
                            "វាមានប្រយោជន៍ពិសេសពេលដែលត្រូវ **ស្វែងរកតម្លៃយ៉ាងលឿន** ដោយប្រើ Key។"
                        ]
                    ],
                    "Dictionary រក្សាទុកទិន្នន័យជាទម្រង់ គូ Key-Value នៅក្នុង `{}`។",
                    "អាចចូលប្រើតម្លៃដោយប្រើ **key** ដែលបានកំណត់។",
                    "ប្រើ Key ថ្មីជាមួយតម្លៃ ដើម្បីបន្ថែមចូលក្នុង Dictionary។",
                    "ប្រើ Key ដដែលជាមួយតម្លៃថ្មី ដើម្បីធ្វើការកែប្រែ",
                    "`.pop(key)` នឹងលុប Key និង Value ដែលបានបញ្ជាក់។",
                    "`.popitem()` នឹងលុប ធាតុចុងក្រោយ ដែលបញ្ចូលចូលទៅ។",
                    "ប្រើ `in` ដើម្បីពិនិត្យមើលថា Key មាននៅក្នុង Dictionary ឬអត់។",
                    "ប្រើ For Loop ដើម្បីទាញ Key ចេញមើល។",
                    "ប្រើ For Loop ដើម្បីទាញ Key និង Value ចេញមកមើលជាគូ។",
                    "ប្រើ `len()` ដើម្បីរាប់ចំនួន Key-Value មានសរុប។",
                    "Dictionary អាចមាន Dictionary ផ្សេងទៀតនៅខាងក្នុង (Nested Structure)។"
                ],
                "នៅក្នុងភាសា Python រាល់ព័ត៌មានដែលអ្នកធ្វើការជាមួយ គឺសុទ្ធតែជា object ហើយ object នីមួយៗសុទ្ធតែមាន **ប្រភេទទិន្នន័យ (Data Type)** របស់វា។ ប្រភេទទិន្នន័យនេះប្រាប់កុំព្យូទ័រថា តើព័ត៌មាននោះជាប្រភេទអ្វី (ដូចជា លេខ អក្សរ ឬតម្លៃពិត/មិនពិត) ហើយអ្នកអាចធ្វើអ្វីខ្លះជាមួយវា។ ការយល់ដឹងពីប្រភេទទិន្នន័យគឺជាជំហានដំបូង និងសំខាន់បំផុតក្នុងការសរសេរកម្មវិធី ព្រោះវាជាអ្នកកំណត់ពីរបៀបដែលទិន្នន័យត្រូវបានរក្សាទុកក្នុងអង្គចងចាំ និងរបៀបដែលប្រតិបត្តិការនានានឹងដំណើរការ។ Python គ្រប់គ្រងប្រភេទទិន្នន័យជាច្រើនដោយស្វ័យប្រវត្តិ ដែលធ្វើឲ្យការសរសេរកូដកាន់តែងាយស្រួល។ ខាងក្រោមនេះជាប្រភេទទិន្នន័យដែរយើងនឹងត្រូវសិក្សាបន្ទាប់។ សូមចុចទៅលើប្រភេទទិន្នន័យខាងក្រោមដើម្បីស្វែងយល់បន្ថែម។",
                [
                    {
                        "title": "ប្រភេទទិន្នន័យ Python",
                        "description": "ចំណាត់ថ្នាក់ដែលបែងចែកប្រភេទទិន្នន័យផ្សេងៗគ្នា (ដូចជា លេខ អក្សរ ឬតម្លៃឡូហ្សិក) ដែលអាចត្រូវបានរក្សាទុក និងប្រើប្រាស់នៅក្នុងកម្មវិធី Python មួយ។",
                        "badgeText": "គ្រឹះ",
                        "param": "?type=data-type"
                    },
                    {
                        "title": "ប្រភេទទិន្នន័យជាលេខ",
                        "description": "តំណាងឱ្យលេខគត់ (**int**), លេខទសភាគ (**float**), និងលេខកុំផ្លិច (**complex**).",
                        "badgeText": "មូលដ្ឋាន",
                        "param": "?type=data-type-numeric"
                    },
                    {
                        "title": "ប្រភេទទិន្នន័យ List",
                        "description": "ការប្រមូលផ្តុំធាតុដែលមាន **លំដាប់** (ordered) និង **អាចផ្លាស់ប្តូរបាន** (mutable) ដែលត្រូវបានដាក់ក្នុង **វង់ក្រចកជ្រុង** (`[]`). ធាតុអាចជាប្រភេទទិន្នន័យផ្សេងៗគ្នា។",
                        "badgeText": "ផ្តោតសំខាន់",
                        "param": "?type=data-type-list"
                    },
                    {
                        "title": "ប្រភេទទិន្នន័យ Tuple",
                        "description": "ការប្រមូលផ្តុំធាតុដែលមាន **លំដាប់** (ordered) ប៉ុន្តែ **មិនអាចផ្លាស់ប្តូរបាន** (immutable) ដែលត្រូវបានដាក់ក្នុង **វង់ក្រចកមូល** (`()`). ត្រូវបានប្រើសម្រាប់ប្រមូលធាតុថេរ (fixed collection).",
                        "badgeText": "សំខាន់",
                        "param": "?type=data-type-tuple"
                    },
                    {
                        "title": "ប្រភេទទិន្នន័យ String",
                        "description": "លំដាប់នៃ **តួអក្សរយូនីកូដ** (អក្សរ) ដែលត្រូវបានដាក់ក្នុង **សញ្ញាដកស្រង់ទោល** (`'...'`) ឬ **សញ្ញាដកស្រង់គូ** (`\"...\"`). String គឺ **មិនអាចផ្លាស់ប្តូរបាន**។",
                        "badgeText": "ផ្តោតសំខាន់",
                        "param": "?type=data-type-string"
                    },
                    {
                        "title": "ប្រភេទទិន្នន័យ Set",
                        "description": "ការប្រមូលផ្តុំធាតុដែល **គ្មានលំដាប់** (unordered) និងមាន **តែមួយគត់** (unique/មិនត្រួតគ្នា) ដែលត្រូវបានដាក់ក្នុង **វង់ក្រចកអង្កាញ់** (`{}`). Set **អាចផ្លាស់ប្តូរបាន** ប៉ុន្តែធាតុរបស់វាត្រូវតែ **មិនអាចផ្លាស់ប្តូរបាន**។",
                        "badgeText": "កម្រិតខ្ពស់",
                        "param": "?type=data-type-set"
                    },
                    {
                        "title": "ប្រភេទទិន្នន័យ Dictionary",
                        "description": "ការប្រមូលផ្តុំដែល **គ្មានលំដាប់** (unordered) នៃ **គូគន្លឹះ-តម្លៃ** (key-value pairs) ដែលត្រូវបានដាក់ក្នុង **វង់ក្រចកអង្កាញ់** (`{}`). គន្លឹះ (keys) ត្រូវតែ **តែមួយគត់** (unique) និង **មិនអាចផ្លាស់ប្តូរបាន** (immutable)។",
                        "badgeText": "ផ្តោតសំខាន់",
                        "param": "?type=data-type-dictionary"
                    }
                ]
            ]
        },
        "python.operator": {
            "title": [
                "ប្រតិបត្តិករ (Operators) ក្នុង Python",
                "ប្រភេទនៃប្រតិបត្តិករ (Operators) ក្នុង Python",
                "១. ប្រតិបត្តិករនព្វន្ត (Operators គណិតវិទ្យា)",
                "២. ប្រតិបត្តិករកំណត់តម្លៃ (Operators ចាត់ចែងតម្លៃ)",
                "៣. ប្រតិបត្តិករប្រៀបធៀប (Operators សម្រាប់ប្រៀបធៀប)",
                "៤. ប្រតិបត្តិករតក្កវិទ្យា (Operators តក្ក)",
                "៥. ប្រតិបត្តិករកម្រិត Bit (Operators លើទិន្នន័យ Bit)",
                "៦. ប្រតិបត្តិករពិសេស (Special Operators)"
            ],
            "description": [
                [
                    "ប្រតិបត្តិករ គឺជាសញ្ញាពិសេសៗដែលប្រើដើម្បីអនុវត្តការងារទៅលើអថេរ (variables) និងតម្លៃ (values)។ ជាឧទាហរណ៍៖",
                    "ក្នុងកូដ `5 + 6` នេះ `+` គឺជាប្រតិបត្តិករដែលបូកលេខពីរគឺ 5 និង 6។"
                ],
                [
                    "នេះគឺជាបញ្ជីនៃប្រភេទ ប្រតិបត្តិករ (Operators) ផ្សេងៗគ្នានៅក្នុង Python ដែលយើងនឹងសិក្សាក្នុងមេរៀននេះ៖",
                    [
                        "ប្រតិបត្តិករនព្វន្ត (Arithmetic Operators)",
                        "ប្រតិបត្តិករកំណត់តម្លៃ (Assignment Operators)",
                        "ប្រតិបត្តិករប្រៀបធៀប (Comparison Operators)",
                        "ប្រតិបត្តិករតក្កវិទ្យា (Logical Operators)",
                        "ប្រតិបត្តិករកម្រិត Bit (Bitwise Operators)",
                        "ប្រតិបត្តិករពិសេស (Special Operators)"
                    ]
                ],
                [
                    [
                        "ប្រតិបត្តិករនព្វន្តត្រូវបានប្រើដើម្បីអនុវត្តប្រតិបត្តិការគណិតវិទ្យាដូចជា បូក ដក គុណ ជាដើម។ ជាឧទាហរណ៍៖",
                        "ក្នុងកូដ `7 - 3` នេះ `-` គឺជាប្រតិបត្តិករនព្វន្តដែលប្រើសម្រាប់ ដក តម្លៃ ឬអថេរពីរ។"
                    ],
                    [
                        {
                            "operator": "`+`",
                            "opertion": "បូក (Addition)",
                            "example": "`5 + 2 = 7`",
                            "description": "បូកបញ្ចូលគ្នា"
                        },
                        {
                            "operator": "`-`",
                            "opertion": "ដក (Subtraction)",
                            "example": "`5 - 2 = 3`",
                            "description": "ដកចេញពីគ្នា"
                        },
                        {
                            "operator": "`*`",
                            "opertion": "គុណ (Multiplication)",
                            "example": "`5 * 2 = 10`",
                            "description": "គុណបញ្ចូលគ្នា"
                        },
                        {
                            "operator": "`/`",
                            "opertion": "ចែក (Division)",
                            "example": "`5 / 2 = 2.5`",
                            "description": "ចែកយកលទ្ធផលជាទសភាគ"
                        },
                        {
                            "operator": "`//`",
                            "opertion": "ចែកយកចំនួនគត់ (Floor Division)",
                            "example": "`5 // 2 = 2`",
                            "description": "ចែកយកតែចំនួនគត់ខាងមុខ"
                        },
                        {
                            "operator": "`%`",
                            "opertion": "សំណល់ (Modulo)",
                            "example": "`5 % 2 = 1`",
                            "description": "ចែកយកសំណល់ (ដែលសល់)"
                        },
                        {
                            "operator": "`**`",
                            "opertion": "ស្វ័យគុណ (Power)",
                            "example": "`5 ** 2 = 25`",
                            "description": "ស្វ័យគុណ ($5^2$)"
                        }
                    ],
                    [
                        "ខាងក្រោមនេះជាឧទាហរណ៍ នៃការប្រើប្រាស់ប្រតិបត្តិករនព្វន្ធ (Arithmetic Operator) ក្នុងភាសា Python",
                        "នៅក្នុងឧទាហរណ៍ខាងលើ យើងបានប្រើប្រតិបត្តិករនព្វន្ធជាច្រើនដូចខាងក្រោម៖",
                        [
                            "`+` ដើម្បីបូក `a` និង `b`",
                            "`-` ដើម្បីដក `b` ចេញពី `a`",
                            "`*` ដើម្បីគុណ `a` និង `b`",
                            "`/` ដើម្បីចែក `a` នឹង `b`",
                            "`//` ដើម្បីចែកយកចំនួនគត់ (Floor Divide) នៃ `a` នឹង `b`",
                            "`%` ដើម្បីយកសំណល់នៃការចែក `a` នឹង `b`",
                            "`**` ដើម្បីបាន `a` លើកជាស្វ័យគុណ `b`"
                        ]
                    ]
                ],
                [
                    [
                        "Assignment operators គឺជាប្រតិបត្តិករដែរត្រូវបានប្រើដើម្បី ដាក់ ឬចាត់ចែងតម្លៃ ទៅឱ្យអថេរ។ ជាឧទាហរណ៍៖",
                        "ក្នុងកូដ `x = 5` នេះ `=` គឺជាប្រតិបត្តិករកំណត់តម្លៃ ដែលកំណត់តម្លៃ **5** ទៅឱ្យអថេរ `x`។",
                        "នេះគឺជាបញ្ជីប្រតិបត្តិករកំណត់តម្លៃ (Assignment Operators) ផ្សេងៗគ្នានៅក្នុង Python៖",
                        [
                            {
                                "operator": "`=`",
                                "opertion": "ប្រតិបត្តិករកំណត់តម្លៃ (Assignment operator)",
                                "example": "`x = 5` (កំណត់តម្លៃ ៥ ទៅអថេរ x)"
                            },
                            {
                                "operator": "`+=`",
                                "opertion": "ប្រតិបត្តិករកំណត់តម្លៃបូក (Addition assignment operator)",
                                "example": "`a += 1 # a = a + 1` (បូក ១ ទៅអថេរ a រួចកំណត់តម្លៃថ្មីទៅអថេរ a)"
                            },
                            {
                                "operator": "`-=`",
                                "opertion": "ប្រតិបត្តិករកំណត់តម្លៃដក (Subtraction assignment operator)",
                                "example": "`a -= 1 # a = a - 1` (ដក ១ ចេញពីអថេរ a រួចកំណត់តម្លៃថ្មីទៅអថេរ a)"
                            },
                            {
                                "operator": "`*=`",
                                "opertion": "ប្រតិបត្តិករកំណត់តម្លៃគុណ (Multiplication assignment operator)",
                                "example": "`a *= 2 # a = a * 2` (គុណអថេរ a នឹង ២ រួចកំណត់តម្លៃថ្មីទៅអថេរ a)"
                            },
                            {
                                "operator": "`/=`",
                                "opertion": "ប្រតិបត្តិករកំណត់តម្លៃចែក (Division assignment operator)",
                                "example": "`a /= 2 # a = a / 2` (ចែកអថេរ a នឹង ២ រួចកំណត់តម្លៃថ្មីទៅអថេរ a)"
                            },
                            {
                                "operator": "`%=`",
                                "opertion": "ប្រតិបត្តិករកំណត់តម្លៃសំណល់ (Remainder assignment)",
                                "example": "`a %= 10 # a = a % 10` (យកសំណល់នៃការចែក a នឹង ១០ រួចកំណត់តម្លៃថ្មីទៅអថេរ a)"
                            },
                            {
                                "operator": "`**=`",
                                "opertion": "ប្រតិបត្តិករកំណត់តម្លៃស្វ័យគុណ (Exponent Assignment)",
                                "example": "`a **= 10 # a = a ** 10` (លើកអថេរ a ជាស្វ័យគុណ ១០ រួចកំណត់តម្លៃថ្មីទៅអថេរ a)"
                            }
                        ],
                        "ខាងក្រោមនេះជាឧទាហរណ៍នៃប្រតិបត្តិករកំណត់តម្លៃ (Assignment Operators)",
                        "នៅទីនេះ យើងបានប្រើប្រតិបត្តិករ `+=` ដើម្បីកំណត់តម្លៃផលបូករបស់ `a` និង `b` ទៅឱ្យ `a`។ ដូចគ្នានេះដែរ យើងអាចប្រើប្រតិបត្តិករកំណត់តម្លៃផ្សេងទៀត តាមតម្រូវការរបស់យើង។"
                    ]
                ],
                [
                    [
                        "ប្រតិបត្តិករប្រៀបធៀប (Comparison operators) ប្រើសម្រាប់ប្រៀបធៀបតម្លៃ/អថេរពីរ និងប្រគល់លទ្ធផលជាប្រភេទប៊ូលាន (Boolean): `True` (ពិត) ឬ `False` (មិនពិត)។ ឧទាហរណ៍៖",
                        "នៅទីនេះ ប្រតិបត្តិករប្រៀបធៀប `>` ត្រូវបានប្រើដើម្បីប្រៀបធៀបថា តើ `a` ធំជាង `b` ឬអត់។",
                        [
                            {
                                "operator": "`==`",
                                "meaning": "ស្មើនឹង (Is Equal To)",
                                "example": "`3 == 5` ផ្ដល់លទ្ធផល `False` (មិនពិត)"
                            },
                            {
                                "operator": "`!=`",
                                "meaning": "មិនស្មើនឹង (Not Equal To)",
                                "example": "`3 != 5` ផ្ដល់លទ្ធផល `True` (ពិត)"
                            },
                            {
                                "operator": "`>`",
                                "meaning": "ធំជាង (Greater Than)",
                                "example": "`3 > 5` ផ្ដល់លទ្ធផល `False` (មិនពិត)"
                            },
                            {
                                "operator": "`>=`",
                                "meaning": "ធំជាង ឬ ស្មើនឹង (Greater Than or Equal To)",
                                "example": "`3 >= 5` ផ្ដល់លទ្ធផល `False` (មិនពិត)"
                            },
                            {
                                "operator": "`<`",
                                "meaning": "តូចជាង (Less Than)",
                                "example": "`3 < 5` ផ្ដល់លទ្ធផល `True` (ពិត)"
                            },
                            {
                                "operator": "`<=`",
                                "meaning": "តូចជាង ឬ ស្មើនឹង (Less Than or Equal To)",
                                "example": "`3 <= 5` ផ្ដល់លទ្ធផល `True` (ពិត)"
                            }
                        ],
                        "ខាងក្រោមនេះជាឧទាហរណ៍នៃប្រតិបត្តិករប្រៀបធៀប (Comparison Operators)៖"
                    ]
                ],
                [
                    [
                        "ប្រតិបត្តិករតក្កវិទ្យា (Logical operators) ត្រូវបានប្រើដើម្បីពិនិត្យមើលថា តើកន្សោមមួយគឺ `True` (ពិត) ឬ `False` (មិនពិត)។ ពួកវាត្រូវបានប្រើក្នុងការសម្រេចចិត្ត។ ឧទាហរណ៍៖",
                        "នៅទីនេះ `and` គឺជាប្រតិបត្តិករតក្កវិទ្យា **AND**។ ដោយសារតែលក្ខខណ្ឌទាំងពីរគឺ `a > 2` និង `b >= 6` សុទ្ធតែ `True` (ពិត) ដូច្នេះលទ្ធផលគឺ `True` (ពិត)។",
                        [
                            {
                                "operator": "`and`",
                                "example": "`(a > 2) and (b >= 6)` ផ្ដល់លទ្ធផល `True` (ពិត)",
                                "meaning": "តក្កវិទ្យា **AND**: **`True`** (ពិត) លុះត្រាតែប្រតិបត្តិកររង **ទាំងពីរ** សុទ្ធតែ **`True`** (ពិត)"
                            },
                            {
                                "operator": "`or`",
                                "example": "`(a > 2) or (b >= 6)` ផ្ដល់លទ្ធផល `True` (ពិត)",
                                "meaning": "តក្កវិទ្យា **OR**: **`True`** (ពិត) ប្រសិនបើប្រតិបត្តិកររង **យ៉ាងហោចណាស់មួយ** គឺជា **`True`** (ពិត)"
                            },
                            {
                                "operator": "`not`",
                                "example": "`not (a > 2)` ផ្ដល់លទ្ធផល `False` (មិនពិត)",
                                "meaning": "តក្កវិទ្យា **NOT**: **`True`** (ពិត) ប្រសិនបើប្រតិបត្តិកររងគឺជា **`False`** (មិនពិត)"
                            }
                        ]
                    ],
                    "ខាងក្រោមនេះជាឧទាហរណ៍នៃប្រតិបត្តិករតក្កវិទ្យា (Logical Operators)"
                ],
                [
                    [
                        "ប្រតិបត្តិករប៊ីតវៃស៍ (Bitwise operators) ដំណើរការលើប្រតិបត្តិកររង ដូចជាពួកវាជាខ្សែអក្សរនៃខ្ទង់គោលពីរ (binary digits)។ ពួកវាធ្វើប្រតិបត្តិការម្តងមួយប៊ីតៗ ដូចនេះហើយទើបមានឈ្មោះបែបនេះ។",
                        "ឧទាហរណ៍៖ **2** គឺ `10` នៅក្នុងគោលពីរ (binary) ហើយ **7** គឺ `111`។",
                        "**នៅក្នុងតារាងខាងក្រោម**: ឧបមាថា `x` = **10** (`0000 1010` នៅក្នុងគោលពីរ) និង `y` = **4** (`0000 0100` នៅក្នុងគោលពីរ)",
                        [
                            {
                                "operator": "`&`",
                                "meaning": "ប៊ីតវៃស៍ **AND**",
                                "example": "x & y = 0 `(0000 0000)`",
                                "description": "កំណត់ប៊ីតនីមួយៗទៅជា **1** លុះត្រាតែប៊ីតទាំងពីរមានតម្លៃ **1**។"
                            },
                            {
                                "operator": "`|`",
                                "meaning": "ប៊ីតវៃស៍ **OR**",
                                "example": "x | y = 14 `(0000 1110)`",
                                "description": "កំណត់ប៊ីតនីមួយៗទៅជា **1** ប្រសិនបើប៊ីតណាមួយក្នុងចំណោមប៊ីតទាំងពីរមានតម្លៃ **1**។"
                            },
                            {
                                "operator": "`~`",
                                "meaning": "ប៊ីតវៃស៍ **NOT**",
                                "example": "~x = 15 `(1111 0101)`",
                                "description": "ប្ដូរតម្លៃប៊ីតទាំងអស់ (**0** ក្លាយជា **1**, និង **1** ក្លាយជា **0**). សម្រាប់ two's complement គឺស្មើនឹង -(x+1)។"
                            },
                            {
                                "operator": "`^`",
                                "meaning": "ប៊ីតវៃស៍ **XOR**",
                                "example": "x ^ y = 14 `(0000 1110)`",
                                "description": "កំណត់ប៊ីតនីមួយៗទៅជា **1** លុះត្រាតែមានប៊ីតណាមួយប៉ុណ្ណោះដែលមានតម្លៃ **1** (មិនមែនទាំងពីរទេ)។"
                            },
                            {
                                "operator": "`<<`",
                                "meaning": "ប៊ីតវៃស៍ រំកិលទៅឆ្វេង (Bitwise Left Shift)",
                                "example": "x << 2 = 40 `(0010 1000)`",
                                "description": "រំកិលប៊ីតទៅខាងឆ្វេងតាមចំនួនខ្ទង់ដែលបានបញ្ជាក់ ដោយបំពេញខ្ទង់ថ្មីដោយលេខ **0**។ នេះស្មើនឹងការគុណនឹង $2^n$។"
                            },
                            {
                                "operator": "`>>`",
                                "meaning": "ប៊ីតវៃស៍ រំកិលទៅស្តាំ (Bitwise Right Shift)",
                                "example": "x >> 2 = 2 `(0000 0010)`",
                                "description": "រំកិលប៊ីតទៅខាងស្តាំតាមចំនួនខ្ទង់ដែលបានបញ្ជាក់។ នេះស្មើនឹងការចែកចំនួនគត់នឹង $2^n$។"
                            }
                        ]
                    ]
                ],
                [
                    [
                        "ភាសា Python ផ្ដល់ជូនប្រតិបត្តិករពិសេសមួយចំនួនដូចជា ប្រតិបត្តិករ **អត្តសញ្ញាណ** (Identity) និងប្រតិបត្តិករ **សមាជិកភាព** (Membership)។ ពួកវាត្រូវបានពន្យល់ខាងក្រោមជាមួយឧទាហរណ៍។",
                        "ប្រតិបត្តិករអត្តសញ្ញាណ (Identity Operators)",
                        "នៅក្នុងភាសា Python, **`is`** និង **`is not`** ត្រូវបានប្រើដើម្បីពិនិត្យមើលថា តើតម្លៃទាំងពីរស្ថិតនៅទីតាំងអង្គចងចាំ (memory location) តែមួយឬអត់។",
                        "វាជារឿងសំខាន់ដែលត្រូវកត់ចំណាំថា៖ ការដែលមានអថេរពីរជាមួយតម្លៃស្មើគ្នា មិនចាំបាច់មានន័យថាពួកវាមានអត្តសញ្ញាណតែមួយនោះទេ។",
                        [
                            {
                                "operator": "`is`",
                                "meaning": "`True` (ពិត) ប្រសិនបើប្រតិបត្តិកររងមាន**អត្តសញ្ញាណតែមួយ** (សំដៅលើវត្ថុតែមួយ)",
                                "example": "`x is True`"
                            },
                            {
                                "operator": "`is not`",
                                "meaning": "`True` (ពិត) ប្រសិនបើប្រតិបត្តិកររង**មិនមានអត្តសញ្ញាណតែមួយ**ទេ (មិនសំដៅលើវត្ថុតែមួយ)",
                                "example": "`x is not True`"
                            }
                        ]
                    ],
                    "ខាងក្រោមនេះជាឧទាហរណ៍នៃប្រតិបត្តិករអត្តសញ្ញាណ (Identity Operators)",
                    [
                        "នៅទីនេះ យើងឃើញថា `x1` និង `y1` គឺជាចំនួនគត់ដែលមានតម្លៃដូចគ្នា ដូច្នេះពួកវាគឺស្មើគ្នា (equal) ក៏ដូចជាមានអត្តសញ្ញាណតែមួយ (identical) ផងដែរ។ ករណីដូចគ្នានេះកើតឡើងចំពោះ `x2` និង `y2` (ខ្សែអក្សរ)។",
                        "ប៉ុន្តែ `x3` និង `y3` គឺជាបញ្ជី (lists)។ ពួកវាស្មើគ្នា (equal) តែ**មិនមានអត្តសញ្ញាណតែមួយ** (not identical) ទេ។ នេះដោយសារតែ Interpreter កំណត់ទីតាំងពួកវាដាច់ដោយឡែកពីគ្នានៅក្នុងអង្គចងចាំ ទោះបីជាពួកវាស្មើគ្នាក៏ដោយ។"
                    ],
                    [
                        "ប្រតិបត្តិករសមាជិកភាព (Membership Operators)",
                        "នៅក្នុងភាសា Python, **`in`** និង **`not in`** គឺជាប្រតិបត្តិករសមាជិកភាព។ ពួកវាត្រូវបានប្រើដើម្បីសាកល្បងថា តើតម្លៃ ឬអថេរមួយត្រូវបានរកឃើញនៅក្នុងលំដាប់ (sequence) មួយឬអត់ (ដូចជា string, list, tuple, set និង dictionary)។",
                        "នៅក្នុង Dictionary, យើងអាចសាកល្បងបានតែចំពោះវត្តមាននៃ **key** ប៉ុណ្ណោះ មិនមែន **value** ទេ។",
                        [
                            {
                                "operator": "`in`",
                                "meaning": "`True` (ពិត) ប្រសិនបើតម្លៃ **ត្រូវបានរកឃើញ** នៅក្នុងលំដាប់នោះ",
                                "example": "`'a' in 'abc'`"
                            },
                            {
                                "operator": "`not in`",
                                "meaning": "`True` (ពិត) ប្រសិនបើតម្លៃ **មិនត្រូវបានរកឃើញ** នៅក្នុងលំដាប់នោះ",
                                "example": "`'a' not in 'abc'`"
                            }
                        ],
                        "ខាងក្រោមនេះជាឧទាហរណ៍នៃប្រតិបត្តិករសមាជិកភាព (Membership Operators)",
                        "នៅទីនេះ `'H'` គឺមាននៅក្នុងអថេរ `message`, ប៉ុន្តែ `'hello'` គឺមិនមានវត្តមាននៅក្នុងអថេរ `message` ទេ (ត្រូវចាំថា Python រើសអើងអក្សរតូចធំ/case-sensitive)។",
                        "ស្រដៀងគ្នានេះដែរ `1` គឺជា key និង `'a'` គឺជា value នៅក្នុង dictionary `dict1`។ ដូច្នេះ `'a' in y` ផ្ដល់លទ្ធផល `False` (មិនពិត)។"
                    ]
                ]
            ]
        }
    },
    "comming_soon": {
        "title": "មកដល់ឆាប់ៗនេះ!",
        "description": "យើងកំពុងខិតខំប្រឹងប្រែងដើម្បីនាំមកជូនអ្នកនូវខ្លឹមសារដ៏ល្អបំផុតដែលអាចធ្វើទៅបាន។ រង់ចាំព័ត៌មានថ្មីៗ!",
        "button": "ត្រឡប់ទៅទំព័រមុន"
    },
    "footer": {
        "previouse": "ទំព័រមុន",
        "next": "ទំព័រ​បន្ទាប់"
    }
}