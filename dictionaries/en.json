{
    "sidebar": {
        "title": "Learning Tutorial",
        "version": "Version 1.0.0",
        "search_placeholder": "Search",
        "python": "Python",
        "python.overview": "Overview",
        "python.variable": "Variable",
        "python.data-type": "Data Type",
        "python.operator": "Operator",
        "python.input-output": "Input & Output",
        "python.control-flow": "Control Flow",
        "python.loop": "Loop",
        "python.function": "Function",
        "python.quiz": "Quiz"
    },
    "contents": {
        "python.overview": {
            "title": [
                "I. What is Python?",
                "II. Python File Extension",
                "III. How to Install Python",
                "IV. How to Check if Python is Installed",
                "V. First Python Program",
                "VI. Python Comments"
            ],
            "description": [
                "Python is a high-level programming language created by Guido van Rossum in 1991. It is simple, easy to read, and can be used in many areas like web apps, data science, AI, automation, and games.",
                "Python files use the extension `.py`. Example: `hello.py`.",
                [
                    "Visit",
                    "Download and install the latest version.",
                    "On Windows, check `Add Python to PATH` before installing."
                ],
                "Open Command Prompt (Windows) or Terminal (Mac/Linux) and type:",
                "Create a file named `hello.py.` as below example.",
                [
                    "Comments in Python are lines in the code that are ignored by the Python interpreter. They are used to explain code, make it easier to read, or temporarily disable code during debugging.",
                    "**Single-line comment** → starts with `#`",
                    "**Multi-line comment (by convention) → use multiple** `#` lines or triple quotes lines or triple quotes `\"\"\" ... \"\"\"`(though triple quotes are actually multi-line strings, often used as docstrings)."
                ]
            ]
        },
        "python.variable": {
            "title": [
                "I. What is a Variable?",
                "II. Creating Variables",
                "III. Variable Naming Rules",
                "IV. Assigning Multiple Values To a Variable",
                "V. Global and Local Variables"
            ],
            "description": [
                "A variable is a container for storing data values. In Python, you don't need to declare the data type before using a variable because Python is a dynamically typed language. The interpreter automatically determines the data type of the variable based on the value you assign to it.",
                "To create a variable, you simply assign a value to a name using the equals sign (`=`). You can also change the value of a variable later, even if the new value has a different data type.",
                [
                    "A variable name can be short like `x` or `y`, or more descriptive like `total_volume` or `car_name`. The rules for Python variables are:",
                    [
                        "A variable name must start with a letter or the underscore character.",
                        "A variable name cannot start with a number.",
                        "A variable name can only contain alpha-numeric characters (A-z, 0-9) and underscores (`_`).",
                        "Variable names are case-sensitive (`age`, `Age`, and `AGE` are three different variables)."
                    ]
                ],
                "Python allows you to assign values to multiple variables in one line. This is often used for unpacking collections or for concise variable initialization.",
                [
                    "A **local variable** is one that is defined inside a function and can only be used within that function. A **global variable** is defined outside any function and can be used by anyone, both inside and outside functions.",
                    "**Example of a local variable**:",
                    "**Example of a global variable**:"
                ]
            ]
        },
        "python.data-type": {
            "title": [
                "I. Python Data Types",
                "II. Python Numeric Data type",
                [
                    "III. Python List Data Type",
                    "Creating a List",
                    "Accessing List Items",
                    "Change List Items",
                    "Add List Items",
                    "Remove List Items",
                    "Loop Lists"
                ],
                [
                    "IV. Python Tuple Data Type",
                    "1. Creating a Tuple",
                    "2. Accessing Elements",
                    "3. Immutability",
                    "4. Unpacking",
                    "5. Nested Tuple",
                    "6. Tuple with One Element",
                    "7. Tuple Operations",
                    "8. Tuple Functions"
                ],
                [
                    "V. Python String Data Type",
                    "1. Creating a String",
                    "2. Accessing by Index",
                    "3. Slicing (Substring)",
                    "4. Concatenation",
                    "5. Length",
                    "6. Immutability (Error)",
                    "7. Repetition",
                    "8. Membership Test",
                    "9. String Functions"
                ],
                [
                    "VI. Python Set Data Type",
                    "1. Creating a Set",
                    "2. No Duplicates Allowed",
                    "3. Mixed Data Types",
                    "4. Adding Elements",
                    "5. Updating with Multiple Elements",
                    "6. Removing Elements (discard)",
                    "7. Removing Elements (remove)",
                    "8. Set Union",
                    "9. Set Intersection",
                    "10. Set Difference",
                    "11. Set Symmetric Difference",
                    "12. Checking Membership",
                    "13. Length of a Set"
                ],
                [
                    "VII. Python Dictionary Data Type",
                    "1. Creating a Dictionary",
                    "2. Accessing Value by Key",
                    "3. Adding a New Key-Value Pair",
                    "4. Updating a Value",
                    "5. Removing a Key-Value Pair (pop)",
                    "6. Removing Last Inserted Item",
                    "7. Checking if Key Exists",
                    "8. Looping through Dictionary (keys)",
                    "9. Looping through Dictionary (values)",
                    "10. Looping through Key-Value Pairs",
                    "11. Dictionary Length",
                    "12. Nested Dictionary"
                ],
                "Welcome to Python Data Types"
            ],
            "description": [
                [
                    "Python Data Types are used to classify and categorize different types of data, such as numbers, text, or true/false values. This classification is crucial for developers to manage data effectively, as it determines the operations that can be performed on a particular data item. In computer programming, data types specify the type of data that can be stored inside a variable. For example:",
                    "Here, **24** (an integer) is assigned to the `num` variable. So the data type of `num` is of the `int` class.",
                    [
                        {
                            "type": "Numeric",
                            "class": "`int`, `float`, `complex`",
                            "description": "holds numeric values"
                        },
                        {
                            "type": "String",
                            "class": "`str`",
                            "description": "holds sequence of characters"
                        },
                        {
                            "type": "Sequence",
                            "class": "`list`, `tuple`, `range`",
                            "description": "holds collection of items"
                        },
                        {
                            "type": "Mapping",
                            "class": "`dict`",
                            "description": "holds data in key-value pair form"
                        },
                        {
                            "type": "Boolean",
                            "class": "`bool`",
                            "description": "holds either `True` or `False`"
                        },
                        {
                            "type": "Set",
                            "class": "`set`, `frozenset`",
                            "description": "hold collection of unique items"
                        }
                    ],
                    "Since everything is an object in Python programming, data types are actually classes and variables are instances(object) of these classes."
                ],
                [
                    "In Python, numeric data type is used to hold numeric values. Integers, floating-point numbers and complex numbers fall under Python numbers category. They are defined as `int`, `float` and `complex` classes in Python.",
                    [
                        "`int` - holds signed integers of non-limited length.",
                        "`float` - holds floating decimal points and it's accurate up to 15 decimal places.",
                        "`complex` - holds complex numbers."
                    ],
                    "We can use the `type()` function to know which class a variable or a value belongs to. Let's see an example:",
                    "In the above example, we have created three variables named `num1`, `num2` and `num3` with values **5**, **5.0**, and `1+2j` respectively.",
                    "We have also used the `type()` function to know which class a certain variable belongs to. Since:",
                    [
                        "**5** is an integer value, `type()` returns `int` as the class of `num1` i.e `<class 'int'>`",
                        "**2.0** is a floating value, `type()` returns `float` as the class of `num2` i.e `<class 'float'>`",
                        "`1 + 2j` is a complex number, `type()` returns `complex` as the class of `num3` i.e `<class 'complex'>`"
                    ]
                ],
                [
                    [
                        "In Python, a list is a built-in data structure that can hold an ordered collection of items. Unlike arrays in some languages, Python lists are very flexible:",
                        [
                            "Can contain duplicate items",
                            "**Mutable**: items can be modified, replaced, or removed",
                            "**Ordered**: elements maintain the order in which they were added",
                            "**Index-based**: items are accessed using their position (starting from 0)",
                            "Index-based: items are accessed using their position (starting from 0)"
                        ]
                    ],
                    [
                        "Lists can be created in several ways, such as using square brackets, the list() constructor or by repeating elements. Let's look at each method one by one with example.",
                        [
                            "**1. Using Square Brackets**",
                            "We use square brackets `[]` to create a list directly.",
                            "**Example**: Creating lists with **integers**, **strings**, and **mixed data types**."
                        ],
                        [
                            "**2. Using the `list()` Constructor**",
                            "We can also create a list by passing an iterable (like a `tuple`, `string` or another list) to the `list()` function",
                            "**Example**: Creating a list from `tuple` and `string`"
                        ],
                        [
                            "**3. Creating List with Repeated Elements**",
                            "We can use the multiplication operator * to create a list with repeated items.",
                            "**Example**: Creating lists with repeated values."
                        ]
                    ],
                    [
                        "Elements in a list are accessed using indexing. Python indexes start at `0`, so `a[0]` gives the first element. Negative indexes allow access from the end (e.g., `-1` gives the last element).",
                        [
                            "**Positive Indexing**",
                            "Items in a list are indexed starting from `0` for the first item. You can access any item by placing its index inside square brackets `[]` after the list name."
                        ],
                        [
                            "**Negative Indexing**",
                            "You can also access items from the end of the list using negative indexes. The last item is at index `-1`, the second to last is at `-2`, and so on. This is a convenient way to get items from the end without knowing the list's length."
                        ],
                        [
                            "**Slicing (Range of Indexes)**",
                            "Slicing allows you to get a new list containing a range of items from an existing one. The syntax is `[start:end]`. The slice includes the `start` index but excludes the `end` index.",
                            [
                                "**Basic Slicing:**",
                                "**Slicing from the beginning:** Omit the start index to start from the first item.",
                                "**Slicing to the end:** Omit the end index to go to the last item."
                            ]
                        ],
                        [
                            "**Range of Negative Indexes**",
                            "You can combine slicing with negative indexes to select a range of items from the end of the list. The same rules apply: the `start` index is inclusive, and the `end` index is exclusive."
                        ],
                        [
                            "**Check if Item Exists**",
                            "Use the `in` keyword to check for the presence of an item in a list. This returns a Boolean value (`True` or `False`). This is a fast and readable way to test for membership."
                        ]
                    ],
                    [
                        [
                            "**Change Item Value**",
                            "You can change the value of a specific item in a list by referring to its index and assigning it a new value."
                        ],
                        [
                            "**Change a Range of Item Values**",
                            "You can change a range of list items by specifying a slice and assigning a new iterable (like another list) to it. The number of new items doesn't have to match the number of items being replaced."
                        ],
                        [
                            "**Insert Items**",
                            "To insert a new item into a list without replacing any existing items, use the `insert()` method. The first argument is the index where you want to insert the item, and the second is the item's value.",
                            "The `insert()` method adds `'kiwi'` at index 1, shifting the original items (`'banana'` and `'cherry'`) to the right."
                        ]
                    ],
                    [
                        [
                            "**Append Items**",
                            "The `append()` method adds a single item to the **end** of a list. This is the most common way to add an element to a list.",
                            "The new item, `'orange'`, is added at the end of the fruits list."
                        ],
                        [
                            "**Insert Items**",
                            "The `insert()` method adds an item at a **specified index** in the list. This shifts all subsequent items to the right to make space for the new item. It takes two arguments: the index and the item to be inserted.",
                            "`'kiwi'` is inserted at index `1`, moving `'banana'` and `'cherry'` to indexes `2` and `3`, respectively."
                        ],
                        [
                            "**Extend List**",
                            "The `extend()` method adds all the items from another iterable (like another list, tuple, or set) to the **end** of the current list. This is a more efficient way to concatenate lists than using the `+` operator.",
                            "The `fruits` list now contains all the items from `tropical_fruits`."
                        ],
                        [
                            "**Add Any Iterable**",
                            "Both the `extend()` method and the list concatenation operator (`+`) can add elements from any iterable object, not just other lists. This includes tuples, sets, and dictionaries.",
                            "**Example using** `extend()` **with a tuple:**",
                            "**Example using the** `+` **operator with a list and a tuple:**",
                            "**Note:** When using `+` to add a tuple, you must first convert the tuple to a list using `list()`. The `extend()` method automatically handles this conversion."
                        ]
                    ],
                    [
                        [
                            "**Remove Specified Item**",
                            "The `remove()` method removes the **first occurrence** of a specified item from the list.",
                            "Even though 'banana' appears twice, `remove()` only deletes the first one it finds."
                        ],
                        [
                            "**Remove Specified Index**",
                            "You can remove an item at a specific position using either the `pop()` method or `del` keyword.",
                            "`pop()` **Method:** This method removes the item at a specified index and **returns the removed item**. If you don't specify an index, it removes and returns the **last item.**",
                            "`del` **Keyword:** This keyword removes an item at a specified index. Unlike `pop()`, it **does not return the removed item**. You can also use `del` to remove an entire slice or the whole list."
                        ],
                        [
                            "**Clear the List**",
                            "The `clear()` method empties the entire list, making it an empty list `[]`. The list object itself remains, but all its content is removed."
                        ]
                    ],
                    [
                        [
                            "**Loop Through a List**",
                            "The most common and Pythonic way to loop through a list is by using a `for` loop. This method directly iterates over each item in the list."
                        ],
                        [
                            "**Loop Through the Index Numbers**",
                            "You can also loop through a list by its index numbers. To do this, use the `range()` and `len()` functions together. `len()` gives you the number of items in the list, and `range()` creates a sequence of numbers from `0` to that length."
                        ],
                        [
                            "**Using a While Loop**",
                            "You can use a `while` loop to iterate through a list by manually keeping track of the index. This method is less common for simple list iteration but is useful when you need more control over the loop's progression."
                        ],
                        [
                            "**Looping Using List Comprehension**",
                            "List comprehension provides a concise and elegant way to create a new list from an existing one with a single line of code. It's often more readable and faster than traditional `for` loops for simple operations."
                        ]
                    ]
                ],
                [
                    "A Python **tuple** is **an ordered, immutable** collection of objects. Like a list, a tuple can hold various data types (integers, strings, etc.) and allows duplicate values. The key difference is its **immutability**: once a tuple is created, you cannot change, add, or remove its elements. Tuples are typically created using **parentheses** `()`. They are often used for data that should not change, such as coordinates or fixed configuration settings, and can be used as keys in a dictionary (since they are immutable).",
                    "A tuple is created using parentheses `()`. It can store different data types together.",
                    "Tuple elements are accessed using an index. Indexing starts from `0`.",
                    "Tuples cannot be changed once created. Trying to modify them causes an error.",
                    "Unpacking allows splitting tuple values into separate variables.",
                    "Tuples can contain other tuples. Use multiple indices to access inner elements.",
                    "A tuple with one element must have a comma, otherwise Python won't recognize it as a tuple.",
                    "Tuples support repetition (`*`) and concatenation (`+`).",
                    "Built-in functions: `len()` = length, `max()` = largest value, `min()` = smallest value, `count()` = occurrences."
                ],
                [
                    "In Python, a string is a sequence of characters enclosed in quotes. It can include letters, numbers, symbols or spaces. Since Python has no separate character type, even a single character is treated as a string with length one. Strings are widely used for text handling and manipulation.",
                    "A string is created using quotation marks (`\"` or `'`). Strings can hold letters, words, and symbols.",
                    "Strings are sequences of characters. Indexing starts from 0, so `greeting[0]` returns the first character.",
                    "Slicing extracts a part of the string. `greeting[6:14]` means characters starting at index 6 up to (but not including) index 14.",
                    "Use `+` to join two or more strings together into one.",
                    "The `len()` function counts the total number of characters (including spaces).",
                    "Strings are immutable, meaning individual characters cannot be changed after creation. To modify, you must create a new string.",
                    "Strings can be repeated using the `*` operator.",
                    "The `in` keyword checks if a substring exists inside a string. It returns `True` if found, otherwise `False`.",
                    "Strings have many built-in methods: `upper()` = uppercase, `capitalize()` = first letter uppercase, `replace()` = replace part of a string."
                ],
                [
                    [
                        "A Set in Python is an unordered collection of unique elements.",
                        [
                            "It does not allow duplicate values.",
                            "The elements inside a set are immutable (cannot be changed), but the set itself is mutable (we can add or remove elements).",
                            "Sets are useful when you need to store multiple values without worrying about duplicates, or when you want to perform mathematical operations like **union, intersection, and difference.**"
                        ]
                    ],
                    "A set is created using curly braces `{}`. It stores **unique values** (no duplicates).",
                    "Duplicate values are automatically removed in a set.",
                    "A set can hold different data types, but only immutable ones (e.g., int, str, float).",
                    "Use `.add()` method to add a single element.",
                    "Use `.update()` method to add multiple elements at once.",
                    "`.discard()` removes an element but does not raise an error if the element is missing.",
                    "`.remove()` removes an element but raises an error if the element is missing.",
                    "Union combines all elements from both sets (no duplicates).",
                    "Intersection finds common elements in both sets.",
                    "Difference keeps elements that are in the first set but not in the second.",
                    "Symmetric difference keeps elements that are in either set but not both.",
                    "Use `in` keyword to check if an element exists in a set.",
                    "Use `len()` to count total elements in a set."
                ],
                [
                    [
                        "A Dictionary in Python is a collection of data stored in key-value pairs.",
                        [
                            "Each item has a **key** and a **value** (example: `\"name\": \"Sok\"`).",
                            "Keys must be **unique** and **immutable** (like strings or numbers).",
                            "Values can be any data type (string, number, list, even another dictionary).",
                            "Dictionaries are **mutable**, meaning you can add, update, or remove items after creation.",
                            "They are useful when you want to organize data in a way that allows **fast lookup** using keys."
                        ]
                    ],
                    "A dictionary stores data in key-value pairs inside curly braces `{}`.",
                    "Access values by referring to their **key**.",
                    "Assign a new key with a value to add it to the dictionary.",
                    "Use the same key with a new value to update.",
                    "`.pop(key)` removes the specified key and its value.",
                    "`.popitem() `removes the last inserted key-value pair.",
                    "Use `in` keyword to check if a key exists in the dictionary.",
                    "Iterates through dictionary keys.",
                    "Iterates through dictionary values.",
                    "Iterates through both keys and values together.",
                    "Use `len()` to count total key-value pairs.",
                    "A dictionary can contain another dictionary (nested structure)."
                ],
                "In Python, every piece of information you work with is an object, and every object has a data type. The **data type** tells the computer what kind of information it is (like a number, text, or a true/false value) and what you can do with it. Understanding data types is the fundamental first step in programming, as it dictates how data is stored in memory and how operations (like addition or combining text) will behave. Python handles many data types automatically, which makes coding easier. Below are the data type that we are going to explore more. Please click below data type to get more knowledges.",
                [
                    {
                        "title": "Python Data Types",
                        "description": "Categories that classify different kinds of data (e.g., numbers, text, or Boolean values) that can be stored and manipulated in a Python program.",
                        "badgeText": "FOUNDATION"
                    },
                    {
                        "title": "Python Numeric Data Type",
                        "description": "Represents whole numbers (**int**), floating-point numbers (**float**), and complex numbers (**complex**).",
                        "badgeText": "FUNDAMENTAL"
                    },
                    {
                        "title": "Python List Data Type",
                        "description": "An **ordered**, **mutable** (changeable) collection of items, enclosed in **square brackets** (`[]`). Items can be of different data types.",
                        "badgeText": "CRITICAL FOCUS"
                    },
                    {
                        "title": "Python Tuple Data Type",
                        "description": "An **ordered**, **immutable** (unchangeable) collection of items, enclosed in **parentheses** (`()`). Often used for fixed collections of items.",
                        "badgeText": "IMPORTANT"
                    },
                    {
                        "title": "Python String Data Type",
                        "description": "A sequence of **Unicode characters** (text) enclosed in **single quotes** (`'...'`) or **double quotes** (`\"...\"`). Strings are **immutable**.",
                        "badgeText": "CRITICAL FOCUS"
                    },
                    {
                        "title": "Python Set Data Type",
                        "description": "An **unordered** collection of **unique** (non-duplicate) items, enclosed in **curly braces** (`{}`). Sets are **mutable** but their elements must be **immutable**.",
                        "badgeText": "ADVANCED USE"
                    },
                    {
                        "title": "Python Dictionary Data Type",
                        "description": "An **unordered** collection of **key-value pairs**, enclosed in **curly braces** (`{}`). Keys must be **unique** and **immutable**.",
                        "badgeText": "CRITICAL FOCUS"
                    }
                ]
            ]
        },
        "python.operator": {
            "title": [
                "Python Operators",
                "Types of Python Operators",
                "1. Arithmetic Operators",
                "2. Assignment Operators",
                "3. Comparison Operators",
                "4. Logical Operators",
                "5. Bitwise Operators",
                "6. Special Operators"
            ],
            "description": [
                [
                    "Operators are special symbols that perform operations on variables and values. For example:",
                    "In code `5 + 6`, here `+` is an operator that adds two numbers: `5` and `6`."
                ],
                [
                    "Here's a list of different types of Python operators that we will learn in this tutorial.",
                    [
                        "Arithmetic Operators",
                        "Assignment Operators",
                        "Comparison Operators",
                        "Logical Operators",
                        "Bitwise Operators",
                        "Special Operators"
                    ]
                ],
                [
                    [
                        "Arithmetic operators are used to perform mathematical operations like addition, subtraction, multiplication, etc. For example:",
                        "Here `7 - 3`, `-` is an arithmetic operator that subtracts two values or variables."
                    ],
                    [
                        {
                            "operator": "`+`",
                            "opertion": "Addition",
                            "example": "`5 + 2 = 7`",
                            "description": "Adds two numbers together"
                        },
                        {
                            "operator": "`-`",
                            "opertion": "Subtraction",
                            "example": "`5 - 2 = 3`",
                            "description": "Subtracts the right number from the left"
                        },
                        {
                            "operator": "`*`",
                            "opertion": "Multiplication",
                            "example": "`5 * 2 = 10`",
                            "description": "Multiplies two numbers"
                        },
                        {
                            "operator": "`/`",
                            "opertion": "Division",
                            "example": "`5 / 2 = 2.5`",
                            "description": "Divides the left number by the right and returns a float result"
                        },
                        {
                            "operator": "`//`",
                            "opertion": "Floor Division",
                            "example": "`5 // 2 = 2`",
                            "description": "Divides and returns only the integer (floor) result"
                        },
                        {
                            "operator": "`%`",
                            "opertion": "Modulo",
                            "example": "`5 % 2 = 1`",
                            "description": "Returns the remainder after division"
                        },
                        {
                            "operator": "`**`",
                            "opertion": "Power",
                            "example": "`5 ** 2 = 25`",
                            "description": "Raises the left number to the power of the right number"
                        }
                    ],
                    [
                        "Below are the example of Arithemtic Operator in Python",
                        "In the above example, we have used multiple arithmetic operators as below:",
                        [
                            "`+` to add `a` and `b`",
                            "`-` to subtract `b` from `a`",
                            "`*` to multiply `a` and `b`",
                            "`/` to divide `a` by `b`",
                            "`//` to floor divide `a` by `b`",
                            "`%` to get the remainder of `a` divided by `b`",
                            "`**` to get `a` to the power of `b`"
                        ]
                    ]
                ],
                [
                    [
                        "Assignment operators are used to assign values to variables. For example",
                        "Here `x = 5`, `=` is an assignment operator that assigns **5** to `x`.",
                        "Here's a list of different assignment operators available in Python.",
                        [
                            {
                                "operator": "`=`",
                                "opertion": "Assignment operator",
                                "example": "`x = 5`"
                            },
                            {
                                "operator": "`+=`",
                                "opertion": "Addition assignment operator",
                                "example": "`a += 1 # a = a + 1`"
                            },
                            {
                                "operator": "`-=`",
                                "opertion": "Subtraction assignment operator",
                                "example": "`a -= 1 # a = a - 1`"
                            },
                            {
                                "operator": "`*=`",
                                "opertion": "Multiplication assignment operator",
                                "example": "`a *= 2 # a = a * 2`"
                            },
                            {
                                "operator": "`/=`",
                                "opertion": "Division assignment operator",
                                "example": "`a /= 2 # a = a / 2`"
                            },
                            {
                                "operator": "`%=`",
                                "opertion": "Remainder assignment",
                                "example": "`a %= 10 # a = a % 10`"
                            },
                            {
                                "operator": "`**=`",
                                "opertion": "Exponent Assignment",
                                "example": "`a **= 10 # a = a ** 10`"
                            }
                        ],
                        "Below are the example of Assignment Operators",
                        "Here, we have used the `+=` operator to assign the sum of `a` and `b` to `a`. Similarly, we can use any other assignment operators as per our needs."
                    ]
                ],
                [
                    [
                        "Comparison operators compare two values/variables and return a boolean result: `True` or `False`. For example:",
                        "Here, the `>` comparison operator is used to compare whether `a` is greater than `b` or not.",
                        [
                            {
                                "operator": "`==`",
                                "meaning": "Is Equal To",
                                "example": "`3 == 5` gives us `False`"
                            },
                            {
                                "operator": "`!=`",
                                "meaning": "Not Equal To",
                                "example": "`3 != 5` gives us `True`"
                            },
                            {
                                "operator": "`>`",
                                "meaning": "Greater Than",
                                "example": "`3 > 5` gives us `False`"
                            },
                            {
                                "operator": "`>=`",
                                "meaning": "Greater Than or Equal To",
                                "example": "`3 >= 5` gives us `False`"
                            },
                            {
                                "operator": "`<`",
                                "meaning": "Less Than",
                                "example": "`3 < 5` gives us `True`"
                            },
                            {
                                "operator": "`<=`",
                                "meaning": "Less Than or Equal To",
                                "example": "`3 <= 5` gives us `True`"
                            }
                        ],
                        "Below are the example of Comparison Operators:"
                    ]
                ],
                [
                    [
                        "Logical operators are used to check whether an expression is `True` or `False`. They are used in decision-making. For example:",
                        "Here, `and` is the logical operator **AND**. Since both `a > 2` and `b >= 6` are `True`, the result is `True`.",
                        [
                            {
                                "operator": "`and`",
                                "example": "`(a > 2) and (b >= 6)` gives us `True`",
                                "meaning": "Logical **AND**: `True` only if both the operands are `True`"
                            },
                            {
                                "operator": "`or`",
                                "example": "`(a > 2) or (b >= 6)` gives us `True`",
                                "meaning": "Logical **OR**: `True` if at least one of the operands is `True`"
                            },
                            {
                                "operator": "`not`",
                                "example": "`not (a > 2)` gives us `False`",
                                "meaning": "Logical **NOT**: `True` if the operand is `False`"
                            }
                        ]
                    ],
                    "Below are the example of Logical Operators"
                ],
                [
                    [
                        "Bitwise operators act on operands as if they were strings of binary digits. They operate bit by bit, hence the name.",
                        "For example, **2** is `10` in binary, and **7** is `111`.",
                        "**In the table below**: Let `x` = **10** (`0000 1010` in binary) and `y` = **4** (`0000 0100` in binary)",
                        [
                            {
                                "operator": "`&`",
                                "meaning": "Bitwise AND",
                                "example": "x & y = 0 `(0000 0000)`",
                                "description": "Sets each bit to 1 if and only if both bits are 1."
                            },
                            {
                                "operator": "`|`",
                                "meaning": "Bitwise OR",
                                "example": "x | y = 14 `(0000 1110)`",
                                "description": "Sets each bit to 1 if at least one of the two bits is 1."
                            },
                            {
                                "operator": "`~`",
                                "meaning": "Bitwise NOT",
                                "example": "~x = 15 `(1111 0101)`",
                                "description": "Inverts all the bits (0 becomes 1, and 1 becomes 0). This is equivalent to -(x+1) for two's complement."
                            },
                            {
                                "operator": "`^`",
                                "meaning": "Bitwise XOR",
                                "example": "x ^ y = 14 `(0000 1110)`",
                                "description": "Sets each bit to 1 if and only if one of the two bits is 1, but not both."
                            },
                            {
                                "operator": "`<<`",
                                "meaning": "Bitwise Left Shift",
                                "example": "x << 2 = 40 `(0010 1000)`",
                                "description": "Shifts the bits to the left by the specified number of places, filling new positions with zeros. This is equivalent to multiplying by $2^n$."
                            },
                            {
                                "operator": "`>>`",
                                "meaning": "Bitwise Right Shift",
                                "example": "x >> 2 = 2 `(0000 0010)`",
                                "description": "Shifts the bits to the right by the specified number of places. This is equivalent to integer division by $2^n$."
                            }
                        ]
                    ]
                ],
                [
                    [
                        "Python language offers some special types of operators like the **identity** operator and the **membership** operator. They are described below with examples.",
                        "Identity operators",
                        "In Python, `is` and `is not` are used to check if two values are located at the same memory location.",
                        "It's important to note that having two variables with equal values doesn't necessarily mean they are identical.",
                        [
                            {
                                "operator": "`is`",
                                "meaning": "`True` if the operands are identical (refer to the same object)",
                                "example": "`x is True`"
                            },
                            {
                                "operator": "`is not`",
                                "meaning": "`True` f the operands are not identical (do not refer to the same object)",
                                "example": "`x is not True`"
                            }
                        ]
                    ],
                    "Below are the example of Identity Operators",
                    [
                        "Here, we see that `x1` and `y1` are integers of the same values, so they are equal as well as identical. The same is the case with `x2` and `y2` (strings).",
                        "But `x3` and `y3` are lists. They are equal but not identical. It is because the interpreter locates them separately in memory, although they are equal."
                    ],
                    [
                        "Membership operators",
                        "In Python, `in` and `not in` are the membership operators. They are used to test whether a value or variable is found in a sequence (string, list, tuple, set and dictionary).",
                        "In a dictionary, we can only test for the presence of a key, not the value.",
                        [
                            {
                                "operator": "`in`",
                                "meaning": "`True` if the value is **found** in the sequence",
                                "example": "`'a' in 'abc'`"
                            },
                            {
                                "operator": "`not in`",
                                "meaning": "`True` if the value is **not found** in the sequence",
                                "example": "`'a' not in 'abc'`"
                            }
                        ],
                        "Below are the example of Membership Operators",
                        "Here, `'H'` is in `message`, but `'hello'` is not present in `message` (remember, Python is case-sensitive).",
                        "Similarly, `1` is key, and `'a'` is the value in dictionary `dict1`. Hence, `'a' in y` returns `False`."
                    ]
                ]
            ]
        }
    },
    "comming_soon": {
        "title": "Coming Soon!",
        "description": "We are working hard to bring you the best content possible. Stay tuned for updates!",
        "button": "Back to previouse page"
    },
    "footer": {
        "previouse": "Previouse",
        "next": "Next"
    }
}